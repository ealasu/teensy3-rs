/* automatically generated by rust-bindgen */

pub const TEENSYDUINO: ::std::os::raw::c_uint = 118;
pub const F_CPU: ::std::os::raw::c_uint = 48000000;
pub const __NEWLIB_H__: ::std::os::raw::c_uint = 1;
pub const _NEWLIB_VERSION: &'static [u8; 6usize] = b"2.2.0\x00";
pub const _WANT_IO_LONG_LONG: ::std::os::raw::c_uint = 1;
pub const _WANT_REGISTER_FINI: ::std::os::raw::c_uint = 1;
pub const _MB_LEN_MAX: ::std::os::raw::c_uint = 1;
pub const HAVE_INITFINI_ARRAY: ::std::os::raw::c_uint = 1;
pub const _ATEXIT_DYNAMIC_ALLOC: ::std::os::raw::c_uint = 1;
pub const _HAVE_LONG_DOUBLE: ::std::os::raw::c_uint = 1;
pub const _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL: ::std::os::raw::c_uint = 1;
pub const _LDBL_EQ_DBL: ::std::os::raw::c_uint = 1;
pub const _FVWRITE_IN_STREAMIO: ::std::os::raw::c_uint = 1;
pub const _FSEEK_OPTIMIZATION: ::std::os::raw::c_uint = 1;
pub const _WIDE_ORIENT: ::std::os::raw::c_uint = 1;
pub const _UNBUF_STREAM_OPT: ::std::os::raw::c_uint = 1;
pub const __NEWLIB__: ::std::os::raw::c_uint = 2;
pub const __NEWLIB_MINOR__: ::std::os::raw::c_uint = 2;
pub const __RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const ___int8_t_defined: ::std::os::raw::c_uint = 1;
pub const ___int16_t_defined: ::std::os::raw::c_uint = 1;
pub const ___int32_t_defined: ::std::os::raw::c_uint = 1;
pub const ___int64_t_defined: ::std::os::raw::c_uint = 1;
pub const ___int_least8_t_defined: ::std::os::raw::c_uint = 1;
pub const ___int_least16_t_defined: ::std::os::raw::c_uint = 1;
pub const ___int_least32_t_defined: ::std::os::raw::c_uint = 1;
pub const ___int_least64_t_defined: ::std::os::raw::c_uint = 1;
pub const _NULL: ::std::os::raw::c_uint = 0;
pub const _ATEXIT_SIZE: ::std::os::raw::c_uint = 32;
pub const _RAND48_SEED_0: ::std::os::raw::c_uint = 13070;
pub const _RAND48_SEED_1: ::std::os::raw::c_uint = 43981;
pub const _RAND48_SEED_2: ::std::os::raw::c_uint = 4660;
pub const _RAND48_MULT_0: ::std::os::raw::c_uint = 58989;
pub const _RAND48_MULT_1: ::std::os::raw::c_uint = 57068;
pub const _RAND48_MULT_2: ::std::os::raw::c_uint = 5;
pub const _RAND48_ADD: ::std::os::raw::c_uint = 11;
pub const _REENT_EMERGENCY_SIZE: ::std::os::raw::c_uint = 25;
pub const _REENT_ASCTIME_SIZE: ::std::os::raw::c_uint = 26;
pub const _REENT_SIGNAL_SIZE: ::std::os::raw::c_uint = 24;
pub const _N_LISTS: ::std::os::raw::c_uint = 30;
pub const __GNUCLIKE_ASM: ::std::os::raw::c_uint = 3;
pub const __GNUCLIKE___TYPEOF: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE___OFFSETOF: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE___SECTION: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: ::std::os::raw::c_uint = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: ::std::os::raw::c_uint = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS_INLINE: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS___INLINE: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS___INLINE__: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS___FUNC__: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS_WARNING: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: ::std::os::raw::c_uint = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: ::std::os::raw::c_uint = 1;
pub const __POSIX_VISIBLE: ::std::os::raw::c_uint = 200809;
pub const __XSI_VISIBLE: ::std::os::raw::c_uint = 700;
pub const __BSD_VISIBLE: ::std::os::raw::c_uint = 1;
pub const __ISO_C_VISIBLE: ::std::os::raw::c_uint = 2011;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const _M_LN2: f32 = 0.6931471805599453;
pub const FP_NAN: ::std::os::raw::c_uint = 0;
pub const FP_INFINITE: ::std::os::raw::c_uint = 1;
pub const FP_ZERO: ::std::os::raw::c_uint = 2;
pub const FP_SUBNORMAL: ::std::os::raw::c_uint = 3;
pub const FP_NORMAL: ::std::os::raw::c_uint = 4;
pub const MATH_ERRNO: ::std::os::raw::c_uint = 1;
pub const MATH_ERREXCEPT: ::std::os::raw::c_uint = 2;
pub const math_errhandling: ::std::os::raw::c_uint = 1;
pub const __PGMSPACE_H_: ::std::os::raw::c_uint = 1;
pub const __have_longlong64: ::std::os::raw::c_uint = 1;
pub const __have_long32: ::std::os::raw::c_uint = 1;
pub const __INT8: &'static [u8; 3usize] = b"hh\x00";
pub const __INT16: &'static [u8; 2usize] = b"h\x00";
pub const __INT64: &'static [u8; 3usize] = b"ll\x00";
pub const __FAST8: &'static [u8; 3usize] = b"hh\x00";
pub const __FAST16: &'static [u8; 2usize] = b"h\x00";
pub const __FAST64: &'static [u8; 3usize] = b"ll\x00";
pub const __LEAST8: &'static [u8; 3usize] = b"hh\x00";
pub const __LEAST16: &'static [u8; 2usize] = b"h\x00";
pub const __LEAST64: &'static [u8; 3usize] = b"ll\x00";
pub const __int8_t_defined: ::std::os::raw::c_uint = 1;
pub const __int16_t_defined: ::std::os::raw::c_uint = 1;
pub const __int32_t_defined: ::std::os::raw::c_uint = 1;
pub const __int64_t_defined: ::std::os::raw::c_uint = 1;
pub const __int_least8_t_defined: ::std::os::raw::c_uint = 1;
pub const __int_least16_t_defined: ::std::os::raw::c_uint = 1;
pub const __int_least32_t_defined: ::std::os::raw::c_uint = 1;
pub const __int_least64_t_defined: ::std::os::raw::c_uint = 1;
pub const __int_fast8_t_defined: ::std::os::raw::c_uint = 1;
pub const __int_fast16_t_defined: ::std::os::raw::c_uint = 1;
pub const __int_fast32_t_defined: ::std::os::raw::c_uint = 1;
pub const __int_fast64_t_defined: ::std::os::raw::c_uint = 1;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const B0: ::std::os::raw::c_uint = 0;
pub const B00: ::std::os::raw::c_uint = 0;
pub const B000: ::std::os::raw::c_uint = 0;
pub const B0000: ::std::os::raw::c_uint = 0;
pub const B00000: ::std::os::raw::c_uint = 0;
pub const B000000: ::std::os::raw::c_uint = 0;
pub const B0000000: ::std::os::raw::c_uint = 0;
pub const B00000000: ::std::os::raw::c_uint = 0;
pub const B1: ::std::os::raw::c_uint = 1;
pub const B01: ::std::os::raw::c_uint = 1;
pub const B001: ::std::os::raw::c_uint = 1;
pub const B0001: ::std::os::raw::c_uint = 1;
pub const B00001: ::std::os::raw::c_uint = 1;
pub const B000001: ::std::os::raw::c_uint = 1;
pub const B0000001: ::std::os::raw::c_uint = 1;
pub const B00000001: ::std::os::raw::c_uint = 1;
pub const B10: ::std::os::raw::c_uint = 2;
pub const B010: ::std::os::raw::c_uint = 2;
pub const B0010: ::std::os::raw::c_uint = 2;
pub const B00010: ::std::os::raw::c_uint = 2;
pub const B000010: ::std::os::raw::c_uint = 2;
pub const B0000010: ::std::os::raw::c_uint = 2;
pub const B00000010: ::std::os::raw::c_uint = 2;
pub const B11: ::std::os::raw::c_uint = 3;
pub const B011: ::std::os::raw::c_uint = 3;
pub const B0011: ::std::os::raw::c_uint = 3;
pub const B00011: ::std::os::raw::c_uint = 3;
pub const B000011: ::std::os::raw::c_uint = 3;
pub const B0000011: ::std::os::raw::c_uint = 3;
pub const B00000011: ::std::os::raw::c_uint = 3;
pub const B100: ::std::os::raw::c_uint = 4;
pub const B0100: ::std::os::raw::c_uint = 4;
pub const B00100: ::std::os::raw::c_uint = 4;
pub const B000100: ::std::os::raw::c_uint = 4;
pub const B0000100: ::std::os::raw::c_uint = 4;
pub const B00000100: ::std::os::raw::c_uint = 4;
pub const B101: ::std::os::raw::c_uint = 5;
pub const B0101: ::std::os::raw::c_uint = 5;
pub const B00101: ::std::os::raw::c_uint = 5;
pub const B000101: ::std::os::raw::c_uint = 5;
pub const B0000101: ::std::os::raw::c_uint = 5;
pub const B00000101: ::std::os::raw::c_uint = 5;
pub const B110: ::std::os::raw::c_uint = 6;
pub const B0110: ::std::os::raw::c_uint = 6;
pub const B00110: ::std::os::raw::c_uint = 6;
pub const B000110: ::std::os::raw::c_uint = 6;
pub const B0000110: ::std::os::raw::c_uint = 6;
pub const B00000110: ::std::os::raw::c_uint = 6;
pub const B111: ::std::os::raw::c_uint = 7;
pub const B0111: ::std::os::raw::c_uint = 7;
pub const B00111: ::std::os::raw::c_uint = 7;
pub const B000111: ::std::os::raw::c_uint = 7;
pub const B0000111: ::std::os::raw::c_uint = 7;
pub const B00000111: ::std::os::raw::c_uint = 7;
pub const B1000: ::std::os::raw::c_uint = 8;
pub const B01000: ::std::os::raw::c_uint = 8;
pub const B001000: ::std::os::raw::c_uint = 8;
pub const B0001000: ::std::os::raw::c_uint = 8;
pub const B00001000: ::std::os::raw::c_uint = 8;
pub const B1001: ::std::os::raw::c_uint = 9;
pub const B01001: ::std::os::raw::c_uint = 9;
pub const B001001: ::std::os::raw::c_uint = 9;
pub const B0001001: ::std::os::raw::c_uint = 9;
pub const B00001001: ::std::os::raw::c_uint = 9;
pub const B1010: ::std::os::raw::c_uint = 10;
pub const B01010: ::std::os::raw::c_uint = 10;
pub const B001010: ::std::os::raw::c_uint = 10;
pub const B0001010: ::std::os::raw::c_uint = 10;
pub const B00001010: ::std::os::raw::c_uint = 10;
pub const B1011: ::std::os::raw::c_uint = 11;
pub const B01011: ::std::os::raw::c_uint = 11;
pub const B001011: ::std::os::raw::c_uint = 11;
pub const B0001011: ::std::os::raw::c_uint = 11;
pub const B00001011: ::std::os::raw::c_uint = 11;
pub const B1100: ::std::os::raw::c_uint = 12;
pub const B01100: ::std::os::raw::c_uint = 12;
pub const B001100: ::std::os::raw::c_uint = 12;
pub const B0001100: ::std::os::raw::c_uint = 12;
pub const B00001100: ::std::os::raw::c_uint = 12;
pub const B1101: ::std::os::raw::c_uint = 13;
pub const B01101: ::std::os::raw::c_uint = 13;
pub const B001101: ::std::os::raw::c_uint = 13;
pub const B0001101: ::std::os::raw::c_uint = 13;
pub const B00001101: ::std::os::raw::c_uint = 13;
pub const B1110: ::std::os::raw::c_uint = 14;
pub const B01110: ::std::os::raw::c_uint = 14;
pub const B001110: ::std::os::raw::c_uint = 14;
pub const B0001110: ::std::os::raw::c_uint = 14;
pub const B00001110: ::std::os::raw::c_uint = 14;
pub const B1111: ::std::os::raw::c_uint = 15;
pub const B01111: ::std::os::raw::c_uint = 15;
pub const B001111: ::std::os::raw::c_uint = 15;
pub const B0001111: ::std::os::raw::c_uint = 15;
pub const B00001111: ::std::os::raw::c_uint = 15;
pub const B10000: ::std::os::raw::c_uint = 16;
pub const B010000: ::std::os::raw::c_uint = 16;
pub const B0010000: ::std::os::raw::c_uint = 16;
pub const B00010000: ::std::os::raw::c_uint = 16;
pub const B10001: ::std::os::raw::c_uint = 17;
pub const B010001: ::std::os::raw::c_uint = 17;
pub const B0010001: ::std::os::raw::c_uint = 17;
pub const B00010001: ::std::os::raw::c_uint = 17;
pub const B10010: ::std::os::raw::c_uint = 18;
pub const B010010: ::std::os::raw::c_uint = 18;
pub const B0010010: ::std::os::raw::c_uint = 18;
pub const B00010010: ::std::os::raw::c_uint = 18;
pub const B10011: ::std::os::raw::c_uint = 19;
pub const B010011: ::std::os::raw::c_uint = 19;
pub const B0010011: ::std::os::raw::c_uint = 19;
pub const B00010011: ::std::os::raw::c_uint = 19;
pub const B10100: ::std::os::raw::c_uint = 20;
pub const B010100: ::std::os::raw::c_uint = 20;
pub const B0010100: ::std::os::raw::c_uint = 20;
pub const B00010100: ::std::os::raw::c_uint = 20;
pub const B10101: ::std::os::raw::c_uint = 21;
pub const B010101: ::std::os::raw::c_uint = 21;
pub const B0010101: ::std::os::raw::c_uint = 21;
pub const B00010101: ::std::os::raw::c_uint = 21;
pub const B10110: ::std::os::raw::c_uint = 22;
pub const B010110: ::std::os::raw::c_uint = 22;
pub const B0010110: ::std::os::raw::c_uint = 22;
pub const B00010110: ::std::os::raw::c_uint = 22;
pub const B10111: ::std::os::raw::c_uint = 23;
pub const B010111: ::std::os::raw::c_uint = 23;
pub const B0010111: ::std::os::raw::c_uint = 23;
pub const B00010111: ::std::os::raw::c_uint = 23;
pub const B11000: ::std::os::raw::c_uint = 24;
pub const B011000: ::std::os::raw::c_uint = 24;
pub const B0011000: ::std::os::raw::c_uint = 24;
pub const B00011000: ::std::os::raw::c_uint = 24;
pub const B11001: ::std::os::raw::c_uint = 25;
pub const B011001: ::std::os::raw::c_uint = 25;
pub const B0011001: ::std::os::raw::c_uint = 25;
pub const B00011001: ::std::os::raw::c_uint = 25;
pub const B11010: ::std::os::raw::c_uint = 26;
pub const B011010: ::std::os::raw::c_uint = 26;
pub const B0011010: ::std::os::raw::c_uint = 26;
pub const B00011010: ::std::os::raw::c_uint = 26;
pub const B11011: ::std::os::raw::c_uint = 27;
pub const B011011: ::std::os::raw::c_uint = 27;
pub const B0011011: ::std::os::raw::c_uint = 27;
pub const B00011011: ::std::os::raw::c_uint = 27;
pub const B11100: ::std::os::raw::c_uint = 28;
pub const B011100: ::std::os::raw::c_uint = 28;
pub const B0011100: ::std::os::raw::c_uint = 28;
pub const B00011100: ::std::os::raw::c_uint = 28;
pub const B11101: ::std::os::raw::c_uint = 29;
pub const B011101: ::std::os::raw::c_uint = 29;
pub const B0011101: ::std::os::raw::c_uint = 29;
pub const B00011101: ::std::os::raw::c_uint = 29;
pub const B11110: ::std::os::raw::c_uint = 30;
pub const B011110: ::std::os::raw::c_uint = 30;
pub const B0011110: ::std::os::raw::c_uint = 30;
pub const B00011110: ::std::os::raw::c_uint = 30;
pub const B11111: ::std::os::raw::c_uint = 31;
pub const B011111: ::std::os::raw::c_uint = 31;
pub const B0011111: ::std::os::raw::c_uint = 31;
pub const B00011111: ::std::os::raw::c_uint = 31;
pub const B100000: ::std::os::raw::c_uint = 32;
pub const B0100000: ::std::os::raw::c_uint = 32;
pub const B00100000: ::std::os::raw::c_uint = 32;
pub const B100001: ::std::os::raw::c_uint = 33;
pub const B0100001: ::std::os::raw::c_uint = 33;
pub const B00100001: ::std::os::raw::c_uint = 33;
pub const B100010: ::std::os::raw::c_uint = 34;
pub const B0100010: ::std::os::raw::c_uint = 34;
pub const B00100010: ::std::os::raw::c_uint = 34;
pub const B100011: ::std::os::raw::c_uint = 35;
pub const B0100011: ::std::os::raw::c_uint = 35;
pub const B00100011: ::std::os::raw::c_uint = 35;
pub const B100100: ::std::os::raw::c_uint = 36;
pub const B0100100: ::std::os::raw::c_uint = 36;
pub const B00100100: ::std::os::raw::c_uint = 36;
pub const B100101: ::std::os::raw::c_uint = 37;
pub const B0100101: ::std::os::raw::c_uint = 37;
pub const B00100101: ::std::os::raw::c_uint = 37;
pub const B100110: ::std::os::raw::c_uint = 38;
pub const B0100110: ::std::os::raw::c_uint = 38;
pub const B00100110: ::std::os::raw::c_uint = 38;
pub const B100111: ::std::os::raw::c_uint = 39;
pub const B0100111: ::std::os::raw::c_uint = 39;
pub const B00100111: ::std::os::raw::c_uint = 39;
pub const B101000: ::std::os::raw::c_uint = 40;
pub const B0101000: ::std::os::raw::c_uint = 40;
pub const B00101000: ::std::os::raw::c_uint = 40;
pub const B101001: ::std::os::raw::c_uint = 41;
pub const B0101001: ::std::os::raw::c_uint = 41;
pub const B00101001: ::std::os::raw::c_uint = 41;
pub const B101010: ::std::os::raw::c_uint = 42;
pub const B0101010: ::std::os::raw::c_uint = 42;
pub const B00101010: ::std::os::raw::c_uint = 42;
pub const B101011: ::std::os::raw::c_uint = 43;
pub const B0101011: ::std::os::raw::c_uint = 43;
pub const B00101011: ::std::os::raw::c_uint = 43;
pub const B101100: ::std::os::raw::c_uint = 44;
pub const B0101100: ::std::os::raw::c_uint = 44;
pub const B00101100: ::std::os::raw::c_uint = 44;
pub const B101101: ::std::os::raw::c_uint = 45;
pub const B0101101: ::std::os::raw::c_uint = 45;
pub const B00101101: ::std::os::raw::c_uint = 45;
pub const B101110: ::std::os::raw::c_uint = 46;
pub const B0101110: ::std::os::raw::c_uint = 46;
pub const B00101110: ::std::os::raw::c_uint = 46;
pub const B101111: ::std::os::raw::c_uint = 47;
pub const B0101111: ::std::os::raw::c_uint = 47;
pub const B00101111: ::std::os::raw::c_uint = 47;
pub const B110000: ::std::os::raw::c_uint = 48;
pub const B0110000: ::std::os::raw::c_uint = 48;
pub const B00110000: ::std::os::raw::c_uint = 48;
pub const B110001: ::std::os::raw::c_uint = 49;
pub const B0110001: ::std::os::raw::c_uint = 49;
pub const B00110001: ::std::os::raw::c_uint = 49;
pub const B110010: ::std::os::raw::c_uint = 50;
pub const B0110010: ::std::os::raw::c_uint = 50;
pub const B00110010: ::std::os::raw::c_uint = 50;
pub const B110011: ::std::os::raw::c_uint = 51;
pub const B0110011: ::std::os::raw::c_uint = 51;
pub const B00110011: ::std::os::raw::c_uint = 51;
pub const B110100: ::std::os::raw::c_uint = 52;
pub const B0110100: ::std::os::raw::c_uint = 52;
pub const B00110100: ::std::os::raw::c_uint = 52;
pub const B110101: ::std::os::raw::c_uint = 53;
pub const B0110101: ::std::os::raw::c_uint = 53;
pub const B00110101: ::std::os::raw::c_uint = 53;
pub const B110110: ::std::os::raw::c_uint = 54;
pub const B0110110: ::std::os::raw::c_uint = 54;
pub const B00110110: ::std::os::raw::c_uint = 54;
pub const B110111: ::std::os::raw::c_uint = 55;
pub const B0110111: ::std::os::raw::c_uint = 55;
pub const B00110111: ::std::os::raw::c_uint = 55;
pub const B111000: ::std::os::raw::c_uint = 56;
pub const B0111000: ::std::os::raw::c_uint = 56;
pub const B00111000: ::std::os::raw::c_uint = 56;
pub const B111001: ::std::os::raw::c_uint = 57;
pub const B0111001: ::std::os::raw::c_uint = 57;
pub const B00111001: ::std::os::raw::c_uint = 57;
pub const B111010: ::std::os::raw::c_uint = 58;
pub const B0111010: ::std::os::raw::c_uint = 58;
pub const B00111010: ::std::os::raw::c_uint = 58;
pub const B111011: ::std::os::raw::c_uint = 59;
pub const B0111011: ::std::os::raw::c_uint = 59;
pub const B00111011: ::std::os::raw::c_uint = 59;
pub const B111100: ::std::os::raw::c_uint = 60;
pub const B0111100: ::std::os::raw::c_uint = 60;
pub const B00111100: ::std::os::raw::c_uint = 60;
pub const B111101: ::std::os::raw::c_uint = 61;
pub const B0111101: ::std::os::raw::c_uint = 61;
pub const B00111101: ::std::os::raw::c_uint = 61;
pub const B111110: ::std::os::raw::c_uint = 62;
pub const B0111110: ::std::os::raw::c_uint = 62;
pub const B00111110: ::std::os::raw::c_uint = 62;
pub const B111111: ::std::os::raw::c_uint = 63;
pub const B0111111: ::std::os::raw::c_uint = 63;
pub const B00111111: ::std::os::raw::c_uint = 63;
pub const B1000000: ::std::os::raw::c_uint = 64;
pub const B01000000: ::std::os::raw::c_uint = 64;
pub const B1000001: ::std::os::raw::c_uint = 65;
pub const B01000001: ::std::os::raw::c_uint = 65;
pub const B1000010: ::std::os::raw::c_uint = 66;
pub const B01000010: ::std::os::raw::c_uint = 66;
pub const B1000011: ::std::os::raw::c_uint = 67;
pub const B01000011: ::std::os::raw::c_uint = 67;
pub const B1000100: ::std::os::raw::c_uint = 68;
pub const B01000100: ::std::os::raw::c_uint = 68;
pub const B1000101: ::std::os::raw::c_uint = 69;
pub const B01000101: ::std::os::raw::c_uint = 69;
pub const B1000110: ::std::os::raw::c_uint = 70;
pub const B01000110: ::std::os::raw::c_uint = 70;
pub const B1000111: ::std::os::raw::c_uint = 71;
pub const B01000111: ::std::os::raw::c_uint = 71;
pub const B1001000: ::std::os::raw::c_uint = 72;
pub const B01001000: ::std::os::raw::c_uint = 72;
pub const B1001001: ::std::os::raw::c_uint = 73;
pub const B01001001: ::std::os::raw::c_uint = 73;
pub const B1001010: ::std::os::raw::c_uint = 74;
pub const B01001010: ::std::os::raw::c_uint = 74;
pub const B1001011: ::std::os::raw::c_uint = 75;
pub const B01001011: ::std::os::raw::c_uint = 75;
pub const B1001100: ::std::os::raw::c_uint = 76;
pub const B01001100: ::std::os::raw::c_uint = 76;
pub const B1001101: ::std::os::raw::c_uint = 77;
pub const B01001101: ::std::os::raw::c_uint = 77;
pub const B1001110: ::std::os::raw::c_uint = 78;
pub const B01001110: ::std::os::raw::c_uint = 78;
pub const B1001111: ::std::os::raw::c_uint = 79;
pub const B01001111: ::std::os::raw::c_uint = 79;
pub const B1010000: ::std::os::raw::c_uint = 80;
pub const B01010000: ::std::os::raw::c_uint = 80;
pub const B1010001: ::std::os::raw::c_uint = 81;
pub const B01010001: ::std::os::raw::c_uint = 81;
pub const B1010010: ::std::os::raw::c_uint = 82;
pub const B01010010: ::std::os::raw::c_uint = 82;
pub const B1010011: ::std::os::raw::c_uint = 83;
pub const B01010011: ::std::os::raw::c_uint = 83;
pub const B1010100: ::std::os::raw::c_uint = 84;
pub const B01010100: ::std::os::raw::c_uint = 84;
pub const B1010101: ::std::os::raw::c_uint = 85;
pub const B01010101: ::std::os::raw::c_uint = 85;
pub const B1010110: ::std::os::raw::c_uint = 86;
pub const B01010110: ::std::os::raw::c_uint = 86;
pub const B1010111: ::std::os::raw::c_uint = 87;
pub const B01010111: ::std::os::raw::c_uint = 87;
pub const B1011000: ::std::os::raw::c_uint = 88;
pub const B01011000: ::std::os::raw::c_uint = 88;
pub const B1011001: ::std::os::raw::c_uint = 89;
pub const B01011001: ::std::os::raw::c_uint = 89;
pub const B1011010: ::std::os::raw::c_uint = 90;
pub const B01011010: ::std::os::raw::c_uint = 90;
pub const B1011011: ::std::os::raw::c_uint = 91;
pub const B01011011: ::std::os::raw::c_uint = 91;
pub const B1011100: ::std::os::raw::c_uint = 92;
pub const B01011100: ::std::os::raw::c_uint = 92;
pub const B1011101: ::std::os::raw::c_uint = 93;
pub const B01011101: ::std::os::raw::c_uint = 93;
pub const B1011110: ::std::os::raw::c_uint = 94;
pub const B01011110: ::std::os::raw::c_uint = 94;
pub const B1011111: ::std::os::raw::c_uint = 95;
pub const B01011111: ::std::os::raw::c_uint = 95;
pub const B1100000: ::std::os::raw::c_uint = 96;
pub const B01100000: ::std::os::raw::c_uint = 96;
pub const B1100001: ::std::os::raw::c_uint = 97;
pub const B01100001: ::std::os::raw::c_uint = 97;
pub const B1100010: ::std::os::raw::c_uint = 98;
pub const B01100010: ::std::os::raw::c_uint = 98;
pub const B1100011: ::std::os::raw::c_uint = 99;
pub const B01100011: ::std::os::raw::c_uint = 99;
pub const B1100100: ::std::os::raw::c_uint = 100;
pub const B01100100: ::std::os::raw::c_uint = 100;
pub const B1100101: ::std::os::raw::c_uint = 101;
pub const B01100101: ::std::os::raw::c_uint = 101;
pub const B1100110: ::std::os::raw::c_uint = 102;
pub const B01100110: ::std::os::raw::c_uint = 102;
pub const B1100111: ::std::os::raw::c_uint = 103;
pub const B01100111: ::std::os::raw::c_uint = 103;
pub const B1101000: ::std::os::raw::c_uint = 104;
pub const B01101000: ::std::os::raw::c_uint = 104;
pub const B1101001: ::std::os::raw::c_uint = 105;
pub const B01101001: ::std::os::raw::c_uint = 105;
pub const B1101010: ::std::os::raw::c_uint = 106;
pub const B01101010: ::std::os::raw::c_uint = 106;
pub const B1101011: ::std::os::raw::c_uint = 107;
pub const B01101011: ::std::os::raw::c_uint = 107;
pub const B1101100: ::std::os::raw::c_uint = 108;
pub const B01101100: ::std::os::raw::c_uint = 108;
pub const B1101101: ::std::os::raw::c_uint = 109;
pub const B01101101: ::std::os::raw::c_uint = 109;
pub const B1101110: ::std::os::raw::c_uint = 110;
pub const B01101110: ::std::os::raw::c_uint = 110;
pub const B1101111: ::std::os::raw::c_uint = 111;
pub const B01101111: ::std::os::raw::c_uint = 111;
pub const B1110000: ::std::os::raw::c_uint = 112;
pub const B01110000: ::std::os::raw::c_uint = 112;
pub const B1110001: ::std::os::raw::c_uint = 113;
pub const B01110001: ::std::os::raw::c_uint = 113;
pub const B1110010: ::std::os::raw::c_uint = 114;
pub const B01110010: ::std::os::raw::c_uint = 114;
pub const B1110011: ::std::os::raw::c_uint = 115;
pub const B01110011: ::std::os::raw::c_uint = 115;
pub const B1110100: ::std::os::raw::c_uint = 116;
pub const B01110100: ::std::os::raw::c_uint = 116;
pub const B1110101: ::std::os::raw::c_uint = 117;
pub const B01110101: ::std::os::raw::c_uint = 117;
pub const B1110110: ::std::os::raw::c_uint = 118;
pub const B01110110: ::std::os::raw::c_uint = 118;
pub const B1110111: ::std::os::raw::c_uint = 119;
pub const B01110111: ::std::os::raw::c_uint = 119;
pub const B1111000: ::std::os::raw::c_uint = 120;
pub const B01111000: ::std::os::raw::c_uint = 120;
pub const B1111001: ::std::os::raw::c_uint = 121;
pub const B01111001: ::std::os::raw::c_uint = 121;
pub const B1111010: ::std::os::raw::c_uint = 122;
pub const B01111010: ::std::os::raw::c_uint = 122;
pub const B1111011: ::std::os::raw::c_uint = 123;
pub const B01111011: ::std::os::raw::c_uint = 123;
pub const B1111100: ::std::os::raw::c_uint = 124;
pub const B01111100: ::std::os::raw::c_uint = 124;
pub const B1111101: ::std::os::raw::c_uint = 125;
pub const B01111101: ::std::os::raw::c_uint = 125;
pub const B1111110: ::std::os::raw::c_uint = 126;
pub const B01111110: ::std::os::raw::c_uint = 126;
pub const B1111111: ::std::os::raw::c_uint = 127;
pub const B01111111: ::std::os::raw::c_uint = 127;
pub const B10000000: ::std::os::raw::c_uint = 128;
pub const B10000001: ::std::os::raw::c_uint = 129;
pub const B10000010: ::std::os::raw::c_uint = 130;
pub const B10000011: ::std::os::raw::c_uint = 131;
pub const B10000100: ::std::os::raw::c_uint = 132;
pub const B10000101: ::std::os::raw::c_uint = 133;
pub const B10000110: ::std::os::raw::c_uint = 134;
pub const B10000111: ::std::os::raw::c_uint = 135;
pub const B10001000: ::std::os::raw::c_uint = 136;
pub const B10001001: ::std::os::raw::c_uint = 137;
pub const B10001010: ::std::os::raw::c_uint = 138;
pub const B10001011: ::std::os::raw::c_uint = 139;
pub const B10001100: ::std::os::raw::c_uint = 140;
pub const B10001101: ::std::os::raw::c_uint = 141;
pub const B10001110: ::std::os::raw::c_uint = 142;
pub const B10001111: ::std::os::raw::c_uint = 143;
pub const B10010000: ::std::os::raw::c_uint = 144;
pub const B10010001: ::std::os::raw::c_uint = 145;
pub const B10010010: ::std::os::raw::c_uint = 146;
pub const B10010011: ::std::os::raw::c_uint = 147;
pub const B10010100: ::std::os::raw::c_uint = 148;
pub const B10010101: ::std::os::raw::c_uint = 149;
pub const B10010110: ::std::os::raw::c_uint = 150;
pub const B10010111: ::std::os::raw::c_uint = 151;
pub const B10011000: ::std::os::raw::c_uint = 152;
pub const B10011001: ::std::os::raw::c_uint = 153;
pub const B10011010: ::std::os::raw::c_uint = 154;
pub const B10011011: ::std::os::raw::c_uint = 155;
pub const B10011100: ::std::os::raw::c_uint = 156;
pub const B10011101: ::std::os::raw::c_uint = 157;
pub const B10011110: ::std::os::raw::c_uint = 158;
pub const B10011111: ::std::os::raw::c_uint = 159;
pub const B10100000: ::std::os::raw::c_uint = 160;
pub const B10100001: ::std::os::raw::c_uint = 161;
pub const B10100010: ::std::os::raw::c_uint = 162;
pub const B10100011: ::std::os::raw::c_uint = 163;
pub const B10100100: ::std::os::raw::c_uint = 164;
pub const B10100101: ::std::os::raw::c_uint = 165;
pub const B10100110: ::std::os::raw::c_uint = 166;
pub const B10100111: ::std::os::raw::c_uint = 167;
pub const B10101000: ::std::os::raw::c_uint = 168;
pub const B10101001: ::std::os::raw::c_uint = 169;
pub const B10101010: ::std::os::raw::c_uint = 170;
pub const B10101011: ::std::os::raw::c_uint = 171;
pub const B10101100: ::std::os::raw::c_uint = 172;
pub const B10101101: ::std::os::raw::c_uint = 173;
pub const B10101110: ::std::os::raw::c_uint = 174;
pub const B10101111: ::std::os::raw::c_uint = 175;
pub const B10110000: ::std::os::raw::c_uint = 176;
pub const B10110001: ::std::os::raw::c_uint = 177;
pub const B10110010: ::std::os::raw::c_uint = 178;
pub const B10110011: ::std::os::raw::c_uint = 179;
pub const B10110100: ::std::os::raw::c_uint = 180;
pub const B10110101: ::std::os::raw::c_uint = 181;
pub const B10110110: ::std::os::raw::c_uint = 182;
pub const B10110111: ::std::os::raw::c_uint = 183;
pub const B10111000: ::std::os::raw::c_uint = 184;
pub const B10111001: ::std::os::raw::c_uint = 185;
pub const B10111010: ::std::os::raw::c_uint = 186;
pub const B10111011: ::std::os::raw::c_uint = 187;
pub const B10111100: ::std::os::raw::c_uint = 188;
pub const B10111101: ::std::os::raw::c_uint = 189;
pub const B10111110: ::std::os::raw::c_uint = 190;
pub const B10111111: ::std::os::raw::c_uint = 191;
pub const B11000000: ::std::os::raw::c_uint = 192;
pub const B11000001: ::std::os::raw::c_uint = 193;
pub const B11000010: ::std::os::raw::c_uint = 194;
pub const B11000011: ::std::os::raw::c_uint = 195;
pub const B11000100: ::std::os::raw::c_uint = 196;
pub const B11000101: ::std::os::raw::c_uint = 197;
pub const B11000110: ::std::os::raw::c_uint = 198;
pub const B11000111: ::std::os::raw::c_uint = 199;
pub const B11001000: ::std::os::raw::c_uint = 200;
pub const B11001001: ::std::os::raw::c_uint = 201;
pub const B11001010: ::std::os::raw::c_uint = 202;
pub const B11001011: ::std::os::raw::c_uint = 203;
pub const B11001100: ::std::os::raw::c_uint = 204;
pub const B11001101: ::std::os::raw::c_uint = 205;
pub const B11001110: ::std::os::raw::c_uint = 206;
pub const B11001111: ::std::os::raw::c_uint = 207;
pub const B11010000: ::std::os::raw::c_uint = 208;
pub const B11010001: ::std::os::raw::c_uint = 209;
pub const B11010010: ::std::os::raw::c_uint = 210;
pub const B11010011: ::std::os::raw::c_uint = 211;
pub const B11010100: ::std::os::raw::c_uint = 212;
pub const B11010101: ::std::os::raw::c_uint = 213;
pub const B11010110: ::std::os::raw::c_uint = 214;
pub const B11010111: ::std::os::raw::c_uint = 215;
pub const B11011000: ::std::os::raw::c_uint = 216;
pub const B11011001: ::std::os::raw::c_uint = 217;
pub const B11011010: ::std::os::raw::c_uint = 218;
pub const B11011011: ::std::os::raw::c_uint = 219;
pub const B11011100: ::std::os::raw::c_uint = 220;
pub const B11011101: ::std::os::raw::c_uint = 221;
pub const B11011110: ::std::os::raw::c_uint = 222;
pub const B11011111: ::std::os::raw::c_uint = 223;
pub const B11100000: ::std::os::raw::c_uint = 224;
pub const B11100001: ::std::os::raw::c_uint = 225;
pub const B11100010: ::std::os::raw::c_uint = 226;
pub const B11100011: ::std::os::raw::c_uint = 227;
pub const B11100100: ::std::os::raw::c_uint = 228;
pub const B11100101: ::std::os::raw::c_uint = 229;
pub const B11100110: ::std::os::raw::c_uint = 230;
pub const B11100111: ::std::os::raw::c_uint = 231;
pub const B11101000: ::std::os::raw::c_uint = 232;
pub const B11101001: ::std::os::raw::c_uint = 233;
pub const B11101010: ::std::os::raw::c_uint = 234;
pub const B11101011: ::std::os::raw::c_uint = 235;
pub const B11101100: ::std::os::raw::c_uint = 236;
pub const B11101101: ::std::os::raw::c_uint = 237;
pub const B11101110: ::std::os::raw::c_uint = 238;
pub const B11101111: ::std::os::raw::c_uint = 239;
pub const B11110000: ::std::os::raw::c_uint = 240;
pub const B11110001: ::std::os::raw::c_uint = 241;
pub const B11110010: ::std::os::raw::c_uint = 242;
pub const B11110011: ::std::os::raw::c_uint = 243;
pub const B11110100: ::std::os::raw::c_uint = 244;
pub const B11110101: ::std::os::raw::c_uint = 245;
pub const B11110110: ::std::os::raw::c_uint = 246;
pub const B11110111: ::std::os::raw::c_uint = 247;
pub const B11111000: ::std::os::raw::c_uint = 248;
pub const B11111001: ::std::os::raw::c_uint = 249;
pub const B11111010: ::std::os::raw::c_uint = 250;
pub const B11111011: ::std::os::raw::c_uint = 251;
pub const B11111100: ::std::os::raw::c_uint = 252;
pub const B11111101: ::std::os::raw::c_uint = 253;
pub const B11111110: ::std::os::raw::c_uint = 254;
pub const B11111111: ::std::os::raw::c_uint = 255;
pub const NVIC_NUM_INTERRUPTS: ::std::os::raw::c_uint = 46;
pub const DMA_NUM_CHANNELS: ::std::os::raw::c_uint = 4;
pub const DMAMUX_SOURCE_UART0_RX: ::std::os::raw::c_uint = 2;
pub const DMAMUX_SOURCE_UART0_TX: ::std::os::raw::c_uint = 3;
pub const DMAMUX_SOURCE_UART1_RX: ::std::os::raw::c_uint = 4;
pub const DMAMUX_SOURCE_UART1_TX: ::std::os::raw::c_uint = 5;
pub const DMAMUX_SOURCE_UART2_RX: ::std::os::raw::c_uint = 6;
pub const DMAMUX_SOURCE_UART2_TX: ::std::os::raw::c_uint = 7;
pub const DMAMUX_SOURCE_I2S0_RX: ::std::os::raw::c_uint = 14;
pub const DMAMUX_SOURCE_I2S0_TX: ::std::os::raw::c_uint = 15;
pub const DMAMUX_SOURCE_SPI0_RX: ::std::os::raw::c_uint = 16;
pub const DMAMUX_SOURCE_SPI0_TX: ::std::os::raw::c_uint = 17;
pub const DMAMUX_SOURCE_I2C0: ::std::os::raw::c_uint = 22;
pub const DMAMUX_SOURCE_FTM0_CH0: ::std::os::raw::c_uint = 24;
pub const DMAMUX_SOURCE_FTM0_CH1: ::std::os::raw::c_uint = 25;
pub const DMAMUX_SOURCE_FTM0_CH2: ::std::os::raw::c_uint = 26;
pub const DMAMUX_SOURCE_FTM0_CH3: ::std::os::raw::c_uint = 27;
pub const DMAMUX_SOURCE_FTM0_CH4: ::std::os::raw::c_uint = 28;
pub const DMAMUX_SOURCE_FTM0_CH5: ::std::os::raw::c_uint = 29;
pub const DMAMUX_SOURCE_FTM0_CH6: ::std::os::raw::c_uint = 30;
pub const DMAMUX_SOURCE_FTM0_CH7: ::std::os::raw::c_uint = 31;
pub const DMAMUX_SOURCE_FTM1_CH0: ::std::os::raw::c_uint = 32;
pub const DMAMUX_SOURCE_FTM1_CH1: ::std::os::raw::c_uint = 33;
pub const DMAMUX_SOURCE_ADC0: ::std::os::raw::c_uint = 40;
pub const DMAMUX_SOURCE_CMP0: ::std::os::raw::c_uint = 42;
pub const DMAMUX_SOURCE_CMP1: ::std::os::raw::c_uint = 43;
pub const DMAMUX_SOURCE_DAC0: ::std::os::raw::c_uint = 45;
pub const DMAMUX_SOURCE_CMT: ::std::os::raw::c_uint = 47;
pub const DMAMUX_SOURCE_PDB: ::std::os::raw::c_uint = 48;
pub const DMAMUX_SOURCE_PORTA: ::std::os::raw::c_uint = 49;
pub const DMAMUX_SOURCE_PORTB: ::std::os::raw::c_uint = 50;
pub const DMAMUX_SOURCE_PORTC: ::std::os::raw::c_uint = 51;
pub const DMAMUX_SOURCE_PORTD: ::std::os::raw::c_uint = 52;
pub const DMAMUX_SOURCE_PORTE: ::std::os::raw::c_uint = 53;
pub const DMAMUX_SOURCE_ALWAYS0: ::std::os::raw::c_uint = 54;
pub const DMAMUX_SOURCE_ALWAYS1: ::std::os::raw::c_uint = 55;
pub const DMAMUX_SOURCE_ALWAYS2: ::std::os::raw::c_uint = 56;
pub const DMAMUX_SOURCE_ALWAYS3: ::std::os::raw::c_uint = 57;
pub const DMAMUX_SOURCE_ALWAYS4: ::std::os::raw::c_uint = 58;
pub const DMAMUX_SOURCE_ALWAYS5: ::std::os::raw::c_uint = 59;
pub const DMAMUX_SOURCE_ALWAYS6: ::std::os::raw::c_uint = 60;
pub const DMAMUX_SOURCE_ALWAYS7: ::std::os::raw::c_uint = 61;
pub const DMAMUX_SOURCE_ALWAYS8: ::std::os::raw::c_uint = 62;
pub const DMAMUX_SOURCE_ALWAYS9: ::std::os::raw::c_uint = 63;
pub const DMAMUX_NUM_SOURCE_ALWAYS: ::std::os::raw::c_uint = 10;
pub const F_PLL: ::std::os::raw::c_uint = 96000000;
pub const F_BUS: ::std::os::raw::c_uint = 48000000;
pub const F_MEM: ::std::os::raw::c_uint = 24000000;
pub const DMAMUX_DISABLE: ::std::os::raw::c_uint = 0;
pub const DMAMUX_TRIG: ::std::os::raw::c_uint = 64;
pub const DMAMUX_ENABLE: ::std::os::raw::c_uint = 128;
pub const DMA_TCD_ATTR_SIZE_8BIT: ::std::os::raw::c_uint = 0;
pub const DMA_TCD_ATTR_SIZE_16BIT: ::std::os::raw::c_uint = 1;
pub const DMA_TCD_ATTR_SIZE_32BIT: ::std::os::raw::c_uint = 2;
pub const DMA_TCD_ATTR_SIZE_16BYTE: ::std::os::raw::c_uint = 4;
pub const DMA_TCD_ATTR_SIZE_32BYTE: ::std::os::raw::c_uint = 5;
pub const DMA_TCD_CSR_BWC_MASK: ::std::os::raw::c_uint = 49152;
pub const DMA_TCD_CSR_MAJORLINKCH_MASK: ::std::os::raw::c_uint = 3840;
pub const DMA_TCD_CSR_DONE: ::std::os::raw::c_uint = 128;
pub const DMA_TCD_CSR_ACTIVE: ::std::os::raw::c_uint = 64;
pub const DMA_TCD_CSR_MAJORELINK: ::std::os::raw::c_uint = 32;
pub const DMA_TCD_CSR_ESG: ::std::os::raw::c_uint = 16;
pub const DMA_TCD_CSR_DREQ: ::std::os::raw::c_uint = 8;
pub const DMA_TCD_CSR_INTHALF: ::std::os::raw::c_uint = 4;
pub const DMA_TCD_CSR_INTMAJOR: ::std::os::raw::c_uint = 2;
pub const DMA_TCD_CSR_START: ::std::os::raw::c_uint = 1;
pub const DMA_TCD_BITER_ELINKYES_ELINK: ::std::os::raw::c_uint = 32768;
pub const DMA_TCD_BITER_ELINKYES_LINKCH_MASK: ::std::os::raw::c_uint = 7680;
pub const DMA_TCD_BITER_ELINKYES_BITER_MASK: ::std::os::raw::c_uint = 511;
pub const DMA_TCD_CITER_ELINKYES_ELINK: ::std::os::raw::c_uint = 32768;
pub const DMA_TCD_CITER_ELINKYES_LINKCH_MASK: ::std::os::raw::c_uint = 7680;
pub const DMA_TCD_CITER_ELINKYES_CITER_MASK: ::std::os::raw::c_uint = 511;
pub const DAC_C0_DACEN: ::std::os::raw::c_uint = 128;
pub const DAC_C0_DACRFS: ::std::os::raw::c_uint = 64;
pub const DAC_C0_DACTRGSEL: ::std::os::raw::c_uint = 32;
pub const DAC_C0_DACSWTRG: ::std::os::raw::c_uint = 16;
pub const DAC_C0_LPEN: ::std::os::raw::c_uint = 8;
pub const DAC_C0_DACBWIEN: ::std::os::raw::c_uint = 4;
pub const DAC_C0_DACBTIEN: ::std::os::raw::c_uint = 2;
pub const DAC_C0_DACBBIEN: ::std::os::raw::c_uint = 1;
pub const DAC_C1_DMAEN: ::std::os::raw::c_uint = 128;
pub const DAC_C1_DACBFEN: ::std::os::raw::c_uint = 1;
pub const PDB_SC_PDBEIE: ::std::os::raw::c_uint = 131072;
pub const PDB_SC_SWTRIG: ::std::os::raw::c_uint = 65536;
pub const PDB_SC_DMAEN: ::std::os::raw::c_uint = 32768;
pub const PDB_SC_PDBEN: ::std::os::raw::c_uint = 128;
pub const PDB_SC_PDBIF: ::std::os::raw::c_uint = 64;
pub const PDB_SC_PDBIE: ::std::os::raw::c_uint = 32;
pub const PDB_SC_CONT: ::std::os::raw::c_uint = 2;
pub const PDB_SC_LDOK: ::std::os::raw::c_uint = 1;
pub const FTM_SC_TOF: ::std::os::raw::c_uint = 128;
pub const FTM_SC_TOIE: ::std::os::raw::c_uint = 64;
pub const FTM_SC_CPWMS: ::std::os::raw::c_uint = 32;
pub const FTM_SC_CLKS_MASK: ::std::os::raw::c_uint = 24;
pub const FTM_SC_PS_MASK: ::std::os::raw::c_uint = 7;
pub const FTM_CSC_CHF: ::std::os::raw::c_uint = 128;
pub const FTM_CSC_CHIE: ::std::os::raw::c_uint = 64;
pub const FTM_CSC_MSB: ::std::os::raw::c_uint = 32;
pub const FTM_CSC_MSA: ::std::os::raw::c_uint = 16;
pub const FTM_CSC_ELSB: ::std::os::raw::c_uint = 8;
pub const FTM_CSC_ELSA: ::std::os::raw::c_uint = 4;
pub const FTM_CSC_DMA: ::std::os::raw::c_uint = 1;
pub const FTM_STATUS_CH7F: ::std::os::raw::c_uint = 128;
pub const FTM_STATUS_CH6F: ::std::os::raw::c_uint = 64;
pub const FTM_STATUS_CH5F: ::std::os::raw::c_uint = 32;
pub const FTM_STATUS_CH4F: ::std::os::raw::c_uint = 16;
pub const FTM_STATUS_CH3F: ::std::os::raw::c_uint = 8;
pub const FTM_STATUS_CH2F: ::std::os::raw::c_uint = 4;
pub const FTM_STATUS_CH1F: ::std::os::raw::c_uint = 2;
pub const FTM_STATUS_CH0F: ::std::os::raw::c_uint = 1;
pub const FTM_MODE_FAULTIE: ::std::os::raw::c_uint = 128;
pub const FTM_MODE_FAULTM_MASK: ::std::os::raw::c_uint = 96;
pub const FTM_MODE_CAPTEST: ::std::os::raw::c_uint = 16;
pub const FTM_MODE_PWMSYNC: ::std::os::raw::c_uint = 8;
pub const FTM_MODE_WPDIS: ::std::os::raw::c_uint = 4;
pub const FTM_MODE_INIT: ::std::os::raw::c_uint = 2;
pub const FTM_MODE_FTMEN: ::std::os::raw::c_uint = 1;
pub const FTM_SYNC_SWSYNC: ::std::os::raw::c_uint = 128;
pub const FTM_SYNC_TRIG2: ::std::os::raw::c_uint = 64;
pub const FTM_SYNC_TRIG1: ::std::os::raw::c_uint = 32;
pub const FTM_SYNC_TRIG0: ::std::os::raw::c_uint = 16;
pub const FTM_SYNC_SYNCHOM: ::std::os::raw::c_uint = 8;
pub const FTM_SYNC_REINIT: ::std::os::raw::c_uint = 4;
pub const FTM_SYNC_CNTMAX: ::std::os::raw::c_uint = 2;
pub const FTM_SYNC_CNTMIN: ::std::os::raw::c_uint = 1;
pub const FTM_OUTINIT_CH7OI: ::std::os::raw::c_uint = 128;
pub const FTM_OUTINIT_CH6OI: ::std::os::raw::c_uint = 64;
pub const FTM_OUTINIT_CH5OI: ::std::os::raw::c_uint = 32;
pub const FTM_OUTINIT_CH4OI: ::std::os::raw::c_uint = 16;
pub const FTM_OUTINIT_CH3OI: ::std::os::raw::c_uint = 8;
pub const FTM_OUTINIT_CH2OI: ::std::os::raw::c_uint = 4;
pub const FTM_OUTINIT_CH1OI: ::std::os::raw::c_uint = 2;
pub const FTM_OUTINIT_CH0OI: ::std::os::raw::c_uint = 1;
pub const FTM_OUTMASK_CH7OM: ::std::os::raw::c_uint = 128;
pub const FTM_OUTMASK_CH6OM: ::std::os::raw::c_uint = 64;
pub const FTM_OUTMASK_CH5OM: ::std::os::raw::c_uint = 32;
pub const FTM_OUTMASK_CH4OM: ::std::os::raw::c_uint = 16;
pub const FTM_OUTMASK_CH3OM: ::std::os::raw::c_uint = 8;
pub const FTM_OUTMASK_CH2OM: ::std::os::raw::c_uint = 4;
pub const FTM_OUTMASK_CH1OM: ::std::os::raw::c_uint = 2;
pub const FTM_OUTMASK_CH0OM: ::std::os::raw::c_uint = 1;
pub const FTM_COMBINE_FAULTEN3: ::std::os::raw::c_uint = 1073741824;
pub const FTM_COMBINE_SYNCEN3: ::std::os::raw::c_uint = 536870912;
pub const FTM_COMBINE_DTEN3: ::std::os::raw::c_uint = 268435456;
pub const FTM_COMBINE_DECAP3: ::std::os::raw::c_uint = 134217728;
pub const FTM_COMBINE_DECAPEN3: ::std::os::raw::c_uint = 67108864;
pub const FTM_COMBINE_COMP3: ::std::os::raw::c_uint = 33554432;
pub const FTM_COMBINE_COMBINE3: ::std::os::raw::c_uint = 16777216;
pub const FTM_COMBINE_FAULTEN2: ::std::os::raw::c_uint = 4194304;
pub const FTM_COMBINE_SYNCEN2: ::std::os::raw::c_uint = 2097152;
pub const FTM_COMBINE_DTEN2: ::std::os::raw::c_uint = 1048576;
pub const FTM_COMBINE_DECAP2: ::std::os::raw::c_uint = 524288;
pub const FTM_COMBINE_DECAPEN2: ::std::os::raw::c_uint = 262144;
pub const FTM_COMBINE_COMP2: ::std::os::raw::c_uint = 131072;
pub const FTM_COMBINE_COMBINE2: ::std::os::raw::c_uint = 65536;
pub const FTM_COMBINE_FAULTEN1: ::std::os::raw::c_uint = 16384;
pub const FTM_COMBINE_SYNCEN1: ::std::os::raw::c_uint = 8192;
pub const FTM_COMBINE_DTEN1: ::std::os::raw::c_uint = 4096;
pub const FTM_COMBINE_DECAP1: ::std::os::raw::c_uint = 2048;
pub const FTM_COMBINE_DECAPEN1: ::std::os::raw::c_uint = 1024;
pub const FTM_COMBINE_COMP1: ::std::os::raw::c_uint = 512;
pub const FTM_COMBINE_COMBINE1: ::std::os::raw::c_uint = 256;
pub const FTM_COMBINE_FAULTEN0: ::std::os::raw::c_uint = 64;
pub const FTM_COMBINE_SYNCEN0: ::std::os::raw::c_uint = 32;
pub const FTM_COMBINE_DTEN0: ::std::os::raw::c_uint = 16;
pub const FTM_COMBINE_DECAP0: ::std::os::raw::c_uint = 8;
pub const FTM_COMBINE_DECAPEN0: ::std::os::raw::c_uint = 4;
pub const FTM_COMBINE_COMP0: ::std::os::raw::c_uint = 2;
pub const FTM_COMBINE_COMBINE0: ::std::os::raw::c_uint = 1;
pub const FTM_DEADTIME_DTPS_MASK: ::std::os::raw::c_uint = 192;
pub const FTM_DEADTIME_DTVAL_MASK: ::std::os::raw::c_uint = 63;
pub const FTM_EXTTRIG_TRIGF: ::std::os::raw::c_uint = 128;
pub const FTM_EXTTRIG_INITTRIGEN: ::std::os::raw::c_uint = 64;
pub const FTM_EXTTRIG_CH1TRIG: ::std::os::raw::c_uint = 32;
pub const FTM_EXTTRIG_CH0TRIG: ::std::os::raw::c_uint = 16;
pub const FTM_EXTTRIG_CH5TRIG: ::std::os::raw::c_uint = 8;
pub const FTM_EXTTRIG_CH4TRIG: ::std::os::raw::c_uint = 4;
pub const FTM_EXTTRIG_CH3TRIG: ::std::os::raw::c_uint = 2;
pub const FTM_EXTTRIG_CH2TRIG: ::std::os::raw::c_uint = 1;
pub const FTM_POL_POL7: ::std::os::raw::c_uint = 128;
pub const FTM_POL_POL6: ::std::os::raw::c_uint = 64;
pub const FTM_POL_POL5: ::std::os::raw::c_uint = 32;
pub const FTM_POL_POL4: ::std::os::raw::c_uint = 16;
pub const FTM_POL_POL3: ::std::os::raw::c_uint = 8;
pub const FTM_POL_POL2: ::std::os::raw::c_uint = 4;
pub const FTM_POL_POL1: ::std::os::raw::c_uint = 2;
pub const FTM_POL_POL0: ::std::os::raw::c_uint = 1;
pub const FTM_FMS_FAULTF: ::std::os::raw::c_uint = 128;
pub const FTM_FMS_WPEN: ::std::os::raw::c_uint = 64;
pub const FTM_FMS_FAULTIN: ::std::os::raw::c_uint = 32;
pub const FTM_FMS_FAULTF3: ::std::os::raw::c_uint = 8;
pub const FTM_FMS_FAULTF2: ::std::os::raw::c_uint = 4;
pub const FTM_FMS_FAULTF1: ::std::os::raw::c_uint = 2;
pub const FTM_FMS_FAULTF0: ::std::os::raw::c_uint = 1;
pub const FTM_FILTER_CH3FVAL_MASK: ::std::os::raw::c_uint = 61440;
pub const FTM_FILTER_CH2FVAL_MASK: ::std::os::raw::c_uint = 3840;
pub const FTM_FILTER_CH1FVAL_MASK: ::std::os::raw::c_uint = 240;
pub const FTM_FILTER_CH0FVAL_MASK: ::std::os::raw::c_uint = 15;
pub const FTM_FLTCTRL_FFVAL_MASK: ::std::os::raw::c_uint = 3840;
pub const FTM_FLTCTRL_FFLTR3EN: ::std::os::raw::c_uint = 128;
pub const FTM_FLTCTRL_FFLTR2EN: ::std::os::raw::c_uint = 64;
pub const FTM_FLTCTRL_FFLTR1EN: ::std::os::raw::c_uint = 32;
pub const FTM_FLTCTRL_FFLTR0EN: ::std::os::raw::c_uint = 16;
pub const FTM_FLTCTRL_FAULT3EN: ::std::os::raw::c_uint = 8;
pub const FTM_FLTCTRL_FAULT2EN: ::std::os::raw::c_uint = 4;
pub const FTM_FLTCTRL_FAULT1EN: ::std::os::raw::c_uint = 2;
pub const FTM_FLTCTRL_FAULT0EN: ::std::os::raw::c_uint = 1;
pub const FTM_QDCTRL_PHAFLTREN: ::std::os::raw::c_uint = 128;
pub const FTM_QDCTRL_PHBFLTREN: ::std::os::raw::c_uint = 64;
pub const FTM_QDCTRL_PHAPOL: ::std::os::raw::c_uint = 32;
pub const FTM_QDCTRL_PHBPOL: ::std::os::raw::c_uint = 16;
pub const FTM_QDCTRL_QUADMODE: ::std::os::raw::c_uint = 8;
pub const FTM_QDCTRL_QUADIR: ::std::os::raw::c_uint = 4;
pub const FTM_QDCTRL_TOFDIR: ::std::os::raw::c_uint = 2;
pub const FTM_QDCTRL_QUADEN: ::std::os::raw::c_uint = 1;
pub const FTM_CONF_GTBEOUT: ::std::os::raw::c_uint = 1024;
pub const FTM_CONF_GTBEEN: ::std::os::raw::c_uint = 512;
pub const FTM_FLTPOL_FLT3POL: ::std::os::raw::c_uint = 8;
pub const FTM_FLTPOL_FLT2POL: ::std::os::raw::c_uint = 4;
pub const FTM_FLTPOL_FLT1POL: ::std::os::raw::c_uint = 2;
pub const FTM_FLTPOL_FLT0POL: ::std::os::raw::c_uint = 1;
pub const FTM_SYNCONF_HWSOC: ::std::os::raw::c_uint = 1048576;
pub const FTM_SYNCONF_HWINVC: ::std::os::raw::c_uint = 524288;
pub const FTM_SYNCONF_HWOM: ::std::os::raw::c_uint = 262144;
pub const FTM_SYNCONF_HWWRBUF: ::std::os::raw::c_uint = 131072;
pub const FTM_SYNCONF_HWRSTCNT: ::std::os::raw::c_uint = 65536;
pub const FTM_SYNCONF_SWSOC: ::std::os::raw::c_uint = 4096;
pub const FTM_SYNCONF_SWINVC: ::std::os::raw::c_uint = 2048;
pub const FTM_SYNCONF_SWOM: ::std::os::raw::c_uint = 1024;
pub const FTM_SYNCONF_SWWRBUF: ::std::os::raw::c_uint = 512;
pub const FTM_SYNCONF_SWRSTCNT: ::std::os::raw::c_uint = 256;
pub const FTM_SYNCONF_SYNCMODE: ::std::os::raw::c_uint = 128;
pub const FTM_SYNCONF_SWOC: ::std::os::raw::c_uint = 32;
pub const FTM_SYNCONF_INVC: ::std::os::raw::c_uint = 16;
pub const FTM_SYNCONF_CNTINC: ::std::os::raw::c_uint = 4;
pub const FTM_SYNCONF_HWTRIGMODE: ::std::os::raw::c_uint = 1;
pub const FTM_INVCTRL_INV3EN: ::std::os::raw::c_uint = 8;
pub const FTM_INVCTRL_INV2EN: ::std::os::raw::c_uint = 4;
pub const FTM_INVCTRL_INV1EN: ::std::os::raw::c_uint = 2;
pub const FTM_INVCTRL_INV0EN: ::std::os::raw::c_uint = 1;
pub const FTM_SWOCTRL_CH7OCV: ::std::os::raw::c_uint = 32768;
pub const FTM_SWOCTRL_CH6OCV: ::std::os::raw::c_uint = 16384;
pub const FTM_SWOCTRL_CH5OCV: ::std::os::raw::c_uint = 8192;
pub const FTM_SWOCTRL_CH4OCV: ::std::os::raw::c_uint = 4096;
pub const FTM_SWOCTRL_CH3OCV: ::std::os::raw::c_uint = 2048;
pub const FTM_SWOCTRL_CH2OCV: ::std::os::raw::c_uint = 1024;
pub const FTM_SWOCTRL_CH1OCV: ::std::os::raw::c_uint = 512;
pub const FTM_SWOCTRL_CH0OCV: ::std::os::raw::c_uint = 256;
pub const FTM_SWOCTRL_CH7OC: ::std::os::raw::c_uint = 128;
pub const FTM_SWOCTRL_CH6OC: ::std::os::raw::c_uint = 64;
pub const FTM_SWOCTRL_CH5OC: ::std::os::raw::c_uint = 32;
pub const FTM_SWOCTRL_CH4OC: ::std::os::raw::c_uint = 16;
pub const FTM_SWOCTRL_CH3OC: ::std::os::raw::c_uint = 8;
pub const FTM_SWOCTRL_CH2OC: ::std::os::raw::c_uint = 4;
pub const FTM_SWOCTRL_CH1OC: ::std::os::raw::c_uint = 2;
pub const FTM_SWOCTRL_CH0OC: ::std::os::raw::c_uint = 1;
pub const FTM_PWMLOAD_LDOK: ::std::os::raw::c_uint = 512;
pub const FTM_PWMLOAD_CH7SEL: ::std::os::raw::c_uint = 128;
pub const FTM_PWMLOAD_CH6SEL: ::std::os::raw::c_uint = 64;
pub const FTM_PWMLOAD_CH5SEL: ::std::os::raw::c_uint = 32;
pub const FTM_PWMLOAD_CH4SEL: ::std::os::raw::c_uint = 16;
pub const FTM_PWMLOAD_CH3SEL: ::std::os::raw::c_uint = 8;
pub const FTM_PWMLOAD_CH2SEL: ::std::os::raw::c_uint = 4;
pub const FTM_PWMLOAD_CH1SEL: ::std::os::raw::c_uint = 2;
pub const FTM_PWMLOAD_CH0SEL: ::std::os::raw::c_uint = 1;
pub const PIT_MCR_MDIS: ::std::os::raw::c_uint = 2;
pub const PIT_MCR_FRZ: ::std::os::raw::c_uint = 1;
pub const PIT_TCTRL_CHN: ::std::os::raw::c_uint = 4;
pub const PIT_TCTRL_TIE: ::std::os::raw::c_uint = 2;
pub const PIT_TCTRL_TEN: ::std::os::raw::c_uint = 1;
pub const PIT_TFLG_TIF: ::std::os::raw::c_uint = 1;
pub const LPTMR_CSR_TCF: ::std::os::raw::c_uint = 128;
pub const LPTMR_CSR_TIE: ::std::os::raw::c_uint = 64;
pub const LPTMR_CSR_TPP: ::std::os::raw::c_uint = 8;
pub const LPTMR_CSR_TFC: ::std::os::raw::c_uint = 4;
pub const LPTMR_CSR_TMS: ::std::os::raw::c_uint = 2;
pub const LPTMR_CSR_TEN: ::std::os::raw::c_uint = 1;
pub const LPTMR_PSR_PBYP: ::std::os::raw::c_uint = 4;
pub const UART_BDH_SBNS: ::std::os::raw::c_uint = 32;
pub const UART_C1_LOOPS: ::std::os::raw::c_uint = 128;
pub const UART_C1_UARTSWAI: ::std::os::raw::c_uint = 64;
pub const UART_C1_RSRC: ::std::os::raw::c_uint = 32;
pub const UART_C1_M: ::std::os::raw::c_uint = 16;
pub const UART_C1_WAKE: ::std::os::raw::c_uint = 8;
pub const UART_C1_ILT: ::std::os::raw::c_uint = 4;
pub const UART_C1_PE: ::std::os::raw::c_uint = 2;
pub const UART_C1_PT: ::std::os::raw::c_uint = 1;
pub const UART_C2_TIE: ::std::os::raw::c_uint = 128;
pub const UART_C2_TCIE: ::std::os::raw::c_uint = 64;
pub const UART_C2_RIE: ::std::os::raw::c_uint = 32;
pub const UART_C2_ILIE: ::std::os::raw::c_uint = 16;
pub const UART_C2_TE: ::std::os::raw::c_uint = 8;
pub const UART_C2_RE: ::std::os::raw::c_uint = 4;
pub const UART_C2_RWU: ::std::os::raw::c_uint = 2;
pub const UART_C2_SBK: ::std::os::raw::c_uint = 1;
pub const UART_S1_TDRE: ::std::os::raw::c_uint = 128;
pub const UART_S1_TC: ::std::os::raw::c_uint = 64;
pub const UART_S1_RDRF: ::std::os::raw::c_uint = 32;
pub const UART_S1_IDLE: ::std::os::raw::c_uint = 16;
pub const UART_S1_OR: ::std::os::raw::c_uint = 8;
pub const UART_S1_NF: ::std::os::raw::c_uint = 4;
pub const UART_S1_FE: ::std::os::raw::c_uint = 2;
pub const UART_S1_PF: ::std::os::raw::c_uint = 1;
pub const UART_S2_LBKDIF: ::std::os::raw::c_uint = 128;
pub const UART_S2_RXEDGIF: ::std::os::raw::c_uint = 64;
pub const UART_S2_MSBF: ::std::os::raw::c_uint = 32;
pub const UART_S2_RXINV: ::std::os::raw::c_uint = 16;
pub const UART_S2_RWUID: ::std::os::raw::c_uint = 8;
pub const UART_S2_BRK13: ::std::os::raw::c_uint = 4;
pub const UART_S2_LBKDE: ::std::os::raw::c_uint = 2;
pub const UART_S2_RAF: ::std::os::raw::c_uint = 1;
pub const UART_C3_R8: ::std::os::raw::c_uint = 128;
pub const UART_C3_T8: ::std::os::raw::c_uint = 64;
pub const UART_C3_TXDIR: ::std::os::raw::c_uint = 32;
pub const UART_C3_TXINV: ::std::os::raw::c_uint = 16;
pub const UART_C3_ORIE: ::std::os::raw::c_uint = 8;
pub const UART_C3_NEIE: ::std::os::raw::c_uint = 4;
pub const UART_C3_FEIE: ::std::os::raw::c_uint = 2;
pub const UART_C3_PEIE: ::std::os::raw::c_uint = 1;
pub const UART_C4_MAEN1: ::std::os::raw::c_uint = 128;
pub const UART_C4_MAEN2: ::std::os::raw::c_uint = 64;
pub const UART_C4_M10: ::std::os::raw::c_uint = 32;
pub const UART_C5_TDMAS: ::std::os::raw::c_uint = 128;
pub const UART_C5_RDMAS: ::std::os::raw::c_uint = 32;
pub const UART_ED_NOISY: ::std::os::raw::c_uint = 128;
pub const UART_ED_PARITYE: ::std::os::raw::c_uint = 64;
pub const UART_MODEM_RXRTSE: ::std::os::raw::c_uint = 8;
pub const UART_MODEM_TXRTSPOL: ::std::os::raw::c_uint = 4;
pub const UART_MODEM_TXRTSE: ::std::os::raw::c_uint = 2;
pub const UART_MODEM_TXCTSE: ::std::os::raw::c_uint = 1;
pub const UART_IR_IREN: ::std::os::raw::c_uint = 4;
pub const UART_PFIFO_TXFE: ::std::os::raw::c_uint = 128;
pub const UART_PFIFO_RXFE: ::std::os::raw::c_uint = 8;
pub const UART_CFIFO_TXFLUSH: ::std::os::raw::c_uint = 128;
pub const UART_CFIFO_RXFLUSH: ::std::os::raw::c_uint = 64;
pub const UART_CFIFO_RXOFE: ::std::os::raw::c_uint = 4;
pub const UART_CFIFO_TXOFE: ::std::os::raw::c_uint = 2;
pub const UART_CFIFO_RXUFE: ::std::os::raw::c_uint = 1;
pub const UART_SFIFO_TXEMPT: ::std::os::raw::c_uint = 128;
pub const UART_SFIFO_RXEMPT: ::std::os::raw::c_uint = 64;
pub const UART_SFIFO_RXOF: ::std::os::raw::c_uint = 4;
pub const UART_SFIFO_TXOF: ::std::os::raw::c_uint = 2;
pub const UART_SFIFO_RXUF: ::std::os::raw::c_uint = 1;
pub const UART_C7816_ONACK: ::std::os::raw::c_uint = 16;
pub const UART_C7816_ANACK: ::std::os::raw::c_uint = 8;
pub const UART_C7816_INIT: ::std::os::raw::c_uint = 4;
pub const UART_C7816_TTYPE: ::std::os::raw::c_uint = 2;
pub const UART_C7816_ISO_7816E: ::std::os::raw::c_uint = 1;
pub const UART_IE7816_WTE: ::std::os::raw::c_uint = 128;
pub const UART_IE7816_CWTE: ::std::os::raw::c_uint = 64;
pub const UART_IE7816_BWTE: ::std::os::raw::c_uint = 32;
pub const UART_IE7816_INITDE: ::std::os::raw::c_uint = 16;
pub const UART_IE7816_GTVE: ::std::os::raw::c_uint = 4;
pub const UART_IE7816_TXTE: ::std::os::raw::c_uint = 2;
pub const UART_IE7816_RXTE: ::std::os::raw::c_uint = 1;
pub const UART_IS7816_WT: ::std::os::raw::c_uint = 128;
pub const UART_IS7816_CWT: ::std::os::raw::c_uint = 64;
pub const UART_IS7816_BWT: ::std::os::raw::c_uint = 32;
pub const UART_IS7816_INITD: ::std::os::raw::c_uint = 16;
pub const UART_IS7816_GTV: ::std::os::raw::c_uint = 4;
pub const UART_IS7816_TXT: ::std::os::raw::c_uint = 2;
pub const UART_IS7816_RXT: ::std::os::raw::c_uint = 1;
pub const UART_C6_EN709: ::std::os::raw::c_uint = 128;
pub const UART_C6_TX709: ::std::os::raw::c_uint = 64;
pub const UART_C6_CE: ::std::os::raw::c_uint = 32;
pub const UART_C6_CP: ::std::os::raw::c_uint = 16;
pub const UART_IE_WBEIE: ::std::os::raw::c_uint = 64;
pub const UART_IE_ISDIE: ::std::os::raw::c_uint = 32;
pub const UART_IE_PRXIE: ::std::os::raw::c_uint = 16;
pub const UART_IE_PTXIE: ::std::os::raw::c_uint = 8;
pub const UART_IE_PCTEIE: ::std::os::raw::c_uint = 4;
pub const UART_IE_PSIE: ::std::os::raw::c_uint = 2;
pub const UART_IE_TXFIE: ::std::os::raw::c_uint = 1;
pub const UART_S3_PEF: ::std::os::raw::c_uint = 128;
pub const UART_S3_WBEF: ::std::os::raw::c_uint = 64;
pub const UART_S3_ISD: ::std::os::raw::c_uint = 32;
pub const UART_S3_PRXF: ::std::os::raw::c_uint = 16;
pub const UART_S3_PTXF: ::std::os::raw::c_uint = 8;
pub const UART_S3_PCTEF: ::std::os::raw::c_uint = 4;
pub const UART_S3_PSF: ::std::os::raw::c_uint = 2;
pub const UART_S3_TXFF: ::std::os::raw::c_uint = 1;
pub const UART_S4_INITF: ::std::os::raw::c_uint = 16;
pub const UART_S4_ILCV: ::std::os::raw::c_uint = 2;
pub const UART_S4_FE: ::std::os::raw::c_uint = 1;
pub const ARM_DEMCR_TRCENA: ::std::os::raw::c_uint = 16777216;
pub const ARM_DWT_CTRL_CYCCNTENA: ::std::os::raw::c_uint = 1;
pub const PIN_A0: ::std::os::raw::c_uint = 14;
pub const PIN_A1: ::std::os::raw::c_uint = 15;
pub const PIN_A2: ::std::os::raw::c_uint = 16;
pub const PIN_A3: ::std::os::raw::c_uint = 17;
pub const PIN_A4: ::std::os::raw::c_uint = 18;
pub const PIN_A5: ::std::os::raw::c_uint = 19;
pub const PIN_A6: ::std::os::raw::c_uint = 20;
pub const PIN_A7: ::std::os::raw::c_uint = 21;
pub const PIN_A8: ::std::os::raw::c_uint = 22;
pub const PIN_A9: ::std::os::raw::c_uint = 23;
pub const PIN_A10: ::std::os::raw::c_uint = 34;
pub const PIN_A11: ::std::os::raw::c_uint = 35;
pub const PIN_A12: ::std::os::raw::c_uint = 36;
pub const PIN_A13: ::std::os::raw::c_uint = 37;
pub const LED_BUILTIN: ::std::os::raw::c_uint = 13;
pub const PIN_SPI_SS: ::std::os::raw::c_uint = 10;
pub const PIN_SPI_MOSI: ::std::os::raw::c_uint = 11;
pub const PIN_SPI_MISO: ::std::os::raw::c_uint = 12;
pub const PIN_SPI_SCK: ::std::os::raw::c_uint = 13;
pub const PIN_WIRE_SDA: ::std::os::raw::c_uint = 18;
pub const PIN_WIRE_SCL: ::std::os::raw::c_uint = 19;
pub const PIN_SERIAL_RX: ::std::os::raw::c_uint = 0;
pub const PIN_SERIAL_TX: ::std::os::raw::c_uint = 1;
pub const NOT_AN_INTERRUPT: ::std::os::raw::c_int = -1;
pub const NOT_ON_TIMER: ::std::os::raw::c_uint = 0;
pub const HIGH: ::std::os::raw::c_uint = 1;
pub const LOW: ::std::os::raw::c_uint = 0;
pub const INPUT: ::std::os::raw::c_uint = 0;
pub const OUTPUT: ::std::os::raw::c_uint = 1;
pub const INPUT_PULLUP: ::std::os::raw::c_uint = 2;
pub const INPUT_PULLDOWN: ::std::os::raw::c_uint = 3;
pub const OUTPUT_OPENDRAIN: ::std::os::raw::c_uint = 4;
pub const LSBFIRST: ::std::os::raw::c_uint = 0;
pub const MSBFIRST: ::std::os::raw::c_uint = 1;
pub const CHANGE: ::std::os::raw::c_uint = 4;
pub const FALLING: ::std::os::raw::c_uint = 2;
pub const RISING: ::std::os::raw::c_uint = 3;
pub const CORE_NUM_TOTAL_PINS: ::std::os::raw::c_uint = 34;
pub const CORE_NUM_DIGITAL: ::std::os::raw::c_uint = 34;
pub const CORE_NUM_INTERRUPT: ::std::os::raw::c_uint = 34;
pub const CORE_NUM_ANALOG: ::std::os::raw::c_uint = 14;
pub const CORE_NUM_PWM: ::std::os::raw::c_uint = 10;
pub const CORE_PIN0_BIT: ::std::os::raw::c_uint = 16;
pub const CORE_PIN1_BIT: ::std::os::raw::c_uint = 17;
pub const CORE_PIN2_BIT: ::std::os::raw::c_uint = 0;
pub const CORE_PIN3_BIT: ::std::os::raw::c_uint = 12;
pub const CORE_PIN4_BIT: ::std::os::raw::c_uint = 13;
pub const CORE_PIN5_BIT: ::std::os::raw::c_uint = 7;
pub const CORE_PIN6_BIT: ::std::os::raw::c_uint = 4;
pub const CORE_PIN7_BIT: ::std::os::raw::c_uint = 2;
pub const CORE_PIN8_BIT: ::std::os::raw::c_uint = 3;
pub const CORE_PIN9_BIT: ::std::os::raw::c_uint = 3;
pub const CORE_PIN10_BIT: ::std::os::raw::c_uint = 4;
pub const CORE_PIN11_BIT: ::std::os::raw::c_uint = 6;
pub const CORE_PIN12_BIT: ::std::os::raw::c_uint = 7;
pub const CORE_PIN13_BIT: ::std::os::raw::c_uint = 5;
pub const CORE_PIN14_BIT: ::std::os::raw::c_uint = 1;
pub const CORE_PIN15_BIT: ::std::os::raw::c_uint = 0;
pub const CORE_PIN16_BIT: ::std::os::raw::c_uint = 0;
pub const CORE_PIN17_BIT: ::std::os::raw::c_uint = 1;
pub const CORE_PIN18_BIT: ::std::os::raw::c_uint = 3;
pub const CORE_PIN19_BIT: ::std::os::raw::c_uint = 2;
pub const CORE_PIN20_BIT: ::std::os::raw::c_uint = 5;
pub const CORE_PIN21_BIT: ::std::os::raw::c_uint = 6;
pub const CORE_PIN22_BIT: ::std::os::raw::c_uint = 1;
pub const CORE_PIN23_BIT: ::std::os::raw::c_uint = 2;
pub const CORE_PIN24_BIT: ::std::os::raw::c_uint = 5;
pub const CORE_PIN25_BIT: ::std::os::raw::c_uint = 19;
pub const CORE_PIN26_BIT: ::std::os::raw::c_uint = 1;
pub const CORE_PIN27_BIT: ::std::os::raw::c_uint = 9;
pub const CORE_PIN28_BIT: ::std::os::raw::c_uint = 8;
pub const CORE_PIN29_BIT: ::std::os::raw::c_uint = 10;
pub const CORE_PIN30_BIT: ::std::os::raw::c_uint = 11;
pub const CORE_PIN31_BIT: ::std::os::raw::c_uint = 0;
pub const CORE_PIN32_BIT: ::std::os::raw::c_uint = 18;
pub const CORE_PIN33_BIT: ::std::os::raw::c_uint = 4;
pub const CORE_PIN0_BITMASK: ::std::os::raw::c_uint = 65536;
pub const CORE_PIN1_BITMASK: ::std::os::raw::c_uint = 131072;
pub const CORE_PIN2_BITMASK: ::std::os::raw::c_uint = 1;
pub const CORE_PIN3_BITMASK: ::std::os::raw::c_uint = 4096;
pub const CORE_PIN4_BITMASK: ::std::os::raw::c_uint = 8192;
pub const CORE_PIN5_BITMASK: ::std::os::raw::c_uint = 128;
pub const CORE_PIN6_BITMASK: ::std::os::raw::c_uint = 16;
pub const CORE_PIN7_BITMASK: ::std::os::raw::c_uint = 4;
pub const CORE_PIN8_BITMASK: ::std::os::raw::c_uint = 8;
pub const CORE_PIN9_BITMASK: ::std::os::raw::c_uint = 8;
pub const CORE_PIN10_BITMASK: ::std::os::raw::c_uint = 16;
pub const CORE_PIN11_BITMASK: ::std::os::raw::c_uint = 64;
pub const CORE_PIN12_BITMASK: ::std::os::raw::c_uint = 128;
pub const CORE_PIN13_BITMASK: ::std::os::raw::c_uint = 32;
pub const CORE_PIN14_BITMASK: ::std::os::raw::c_uint = 2;
pub const CORE_PIN15_BITMASK: ::std::os::raw::c_uint = 1;
pub const CORE_PIN16_BITMASK: ::std::os::raw::c_uint = 1;
pub const CORE_PIN17_BITMASK: ::std::os::raw::c_uint = 2;
pub const CORE_PIN18_BITMASK: ::std::os::raw::c_uint = 8;
pub const CORE_PIN19_BITMASK: ::std::os::raw::c_uint = 4;
pub const CORE_PIN20_BITMASK: ::std::os::raw::c_uint = 32;
pub const CORE_PIN21_BITMASK: ::std::os::raw::c_uint = 64;
pub const CORE_PIN22_BITMASK: ::std::os::raw::c_uint = 2;
pub const CORE_PIN23_BITMASK: ::std::os::raw::c_uint = 4;
pub const CORE_PIN24_BITMASK: ::std::os::raw::c_uint = 32;
pub const CORE_PIN25_BITMASK: ::std::os::raw::c_uint = 524288;
pub const CORE_PIN26_BITMASK: ::std::os::raw::c_uint = 2;
pub const CORE_PIN27_BITMASK: ::std::os::raw::c_uint = 512;
pub const CORE_PIN28_BITMASK: ::std::os::raw::c_uint = 256;
pub const CORE_PIN29_BITMASK: ::std::os::raw::c_uint = 1024;
pub const CORE_PIN30_BITMASK: ::std::os::raw::c_uint = 2048;
pub const CORE_PIN31_BITMASK: ::std::os::raw::c_uint = 1;
pub const CORE_PIN32_BITMASK: ::std::os::raw::c_uint = 262144;
pub const CORE_PIN33_BITMASK: ::std::os::raw::c_uint = 16;
pub const CORE_ADC0_PIN: ::std::os::raw::c_uint = 14;
pub const CORE_ADC1_PIN: ::std::os::raw::c_uint = 15;
pub const CORE_ADC2_PIN: ::std::os::raw::c_uint = 16;
pub const CORE_ADC3_PIN: ::std::os::raw::c_uint = 17;
pub const CORE_ADC4_PIN: ::std::os::raw::c_uint = 18;
pub const CORE_ADC5_PIN: ::std::os::raw::c_uint = 19;
pub const CORE_ADC6_PIN: ::std::os::raw::c_uint = 20;
pub const CORE_ADC7_PIN: ::std::os::raw::c_uint = 21;
pub const CORE_ADC8_PIN: ::std::os::raw::c_uint = 22;
pub const CORE_ADC9_PIN: ::std::os::raw::c_uint = 23;
pub const CORE_ADC10_PIN: ::std::os::raw::c_uint = 34;
pub const CORE_ADC11_PIN: ::std::os::raw::c_uint = 35;
pub const CORE_ADC12_PIN: ::std::os::raw::c_uint = 36;
pub const CORE_ADC13_PIN: ::std::os::raw::c_uint = 37;
pub const CORE_RXD0_PIN: ::std::os::raw::c_uint = 0;
pub const CORE_TXD0_PIN: ::std::os::raw::c_uint = 1;
pub const CORE_RXD1_PIN: ::std::os::raw::c_uint = 9;
pub const CORE_TXD1_PIN: ::std::os::raw::c_uint = 10;
pub const CORE_RXD2_PIN: ::std::os::raw::c_uint = 7;
pub const CORE_TXD2_PIN: ::std::os::raw::c_uint = 8;
pub const CORE_INT0_PIN: ::std::os::raw::c_uint = 0;
pub const CORE_INT1_PIN: ::std::os::raw::c_uint = 1;
pub const CORE_INT2_PIN: ::std::os::raw::c_uint = 2;
pub const CORE_INT3_PIN: ::std::os::raw::c_uint = 3;
pub const CORE_INT4_PIN: ::std::os::raw::c_uint = 4;
pub const CORE_INT5_PIN: ::std::os::raw::c_uint = 5;
pub const CORE_INT6_PIN: ::std::os::raw::c_uint = 6;
pub const CORE_INT7_PIN: ::std::os::raw::c_uint = 7;
pub const CORE_INT8_PIN: ::std::os::raw::c_uint = 8;
pub const CORE_INT9_PIN: ::std::os::raw::c_uint = 9;
pub const CORE_INT10_PIN: ::std::os::raw::c_uint = 10;
pub const CORE_INT11_PIN: ::std::os::raw::c_uint = 11;
pub const CORE_INT12_PIN: ::std::os::raw::c_uint = 12;
pub const CORE_INT13_PIN: ::std::os::raw::c_uint = 13;
pub const CORE_INT14_PIN: ::std::os::raw::c_uint = 14;
pub const CORE_INT15_PIN: ::std::os::raw::c_uint = 15;
pub const CORE_INT16_PIN: ::std::os::raw::c_uint = 16;
pub const CORE_INT17_PIN: ::std::os::raw::c_uint = 17;
pub const CORE_INT18_PIN: ::std::os::raw::c_uint = 18;
pub const CORE_INT19_PIN: ::std::os::raw::c_uint = 19;
pub const CORE_INT20_PIN: ::std::os::raw::c_uint = 20;
pub const CORE_INT21_PIN: ::std::os::raw::c_uint = 21;
pub const CORE_INT22_PIN: ::std::os::raw::c_uint = 22;
pub const CORE_INT23_PIN: ::std::os::raw::c_uint = 23;
pub const CORE_INT24_PIN: ::std::os::raw::c_uint = 24;
pub const CORE_INT25_PIN: ::std::os::raw::c_uint = 25;
pub const CORE_INT26_PIN: ::std::os::raw::c_uint = 26;
pub const CORE_INT27_PIN: ::std::os::raw::c_uint = 27;
pub const CORE_INT28_PIN: ::std::os::raw::c_uint = 28;
pub const CORE_INT29_PIN: ::std::os::raw::c_uint = 29;
pub const CORE_INT30_PIN: ::std::os::raw::c_uint = 30;
pub const CORE_INT31_PIN: ::std::os::raw::c_uint = 31;
pub const CORE_INT32_PIN: ::std::os::raw::c_uint = 32;
pub const CORE_INT33_PIN: ::std::os::raw::c_uint = 33;
pub const CORE_INT_EVERY_PIN: ::std::os::raw::c_uint = 1;
pub const DEFAULT: ::std::os::raw::c_uint = 0;
pub const INTERNAL: ::std::os::raw::c_uint = 2;
pub const INTERNAL1V2: ::std::os::raw::c_uint = 2;
pub const INTERNAL1V1: ::std::os::raw::c_uint = 2;
pub const EXTERNAL: ::std::os::raw::c_uint = 0;
pub const PI: f32 = 3.141592653589793;
pub const HALF_PI: f32 = 1.5707963267948966;
pub const TWO_PI: f32 = 6.283185307179586;
pub const DEG_TO_RAD: f32 = 0.017453292519943295;
pub const RAD_TO_DEG: f32 = 57.29577951308232;
pub const M_PI: f32 = 3.141592653589793;
pub const M_SQRT2: f32 = 1.4142135623730951;
pub const SERIAL: ::std::os::raw::c_uint = 0;
pub const DISPLAY: ::std::os::raw::c_uint = 1;
pub const SERIAL_7E1: ::std::os::raw::c_uint = 2;
pub const SERIAL_7O1: ::std::os::raw::c_uint = 3;
pub const SERIAL_8N1: ::std::os::raw::c_uint = 0;
pub const SERIAL_8N2: ::std::os::raw::c_uint = 4;
pub const SERIAL_8E1: ::std::os::raw::c_uint = 6;
pub const SERIAL_8O1: ::std::os::raw::c_uint = 7;
pub const SERIAL_7E1_RXINV: ::std::os::raw::c_uint = 18;
pub const SERIAL_7O1_RXINV: ::std::os::raw::c_uint = 19;
pub const SERIAL_8N1_RXINV: ::std::os::raw::c_uint = 16;
pub const SERIAL_8N2_RXINV: ::std::os::raw::c_uint = 20;
pub const SERIAL_8E1_RXINV: ::std::os::raw::c_uint = 22;
pub const SERIAL_8O1_RXINV: ::std::os::raw::c_uint = 23;
pub const SERIAL_7E1_TXINV: ::std::os::raw::c_uint = 34;
pub const SERIAL_7O1_TXINV: ::std::os::raw::c_uint = 35;
pub const SERIAL_8N1_TXINV: ::std::os::raw::c_uint = 32;
pub const SERIAL_8N2_TXINV: ::std::os::raw::c_uint = 36;
pub const SERIAL_8E1_TXINV: ::std::os::raw::c_uint = 38;
pub const SERIAL_8O1_TXINV: ::std::os::raw::c_uint = 39;
pub const SERIAL_7E1_RXINV_TXINV: ::std::os::raw::c_uint = 50;
pub const SERIAL_7O1_RXINV_TXINV: ::std::os::raw::c_uint = 51;
pub const SERIAL_8N1_RXINV_TXINV: ::std::os::raw::c_uint = 48;
pub const SERIAL_8N2_RXINV_TXINV: ::std::os::raw::c_uint = 52;
pub const SERIAL_8E1_RXINV_TXINV: ::std::os::raw::c_uint = 54;
pub const SERIAL_8O1_RXINV_TXINV: ::std::os::raw::c_uint = 55;
pub const NBBY: ::std::os::raw::c_uint = 8;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 64;
pub const __SLBF: ::std::os::raw::c_uint = 1;
pub const __SNBF: ::std::os::raw::c_uint = 2;
pub const __SRD: ::std::os::raw::c_uint = 4;
pub const __SWR: ::std::os::raw::c_uint = 8;
pub const __SRW: ::std::os::raw::c_uint = 16;
pub const __SEOF: ::std::os::raw::c_uint = 32;
pub const __SERR: ::std::os::raw::c_uint = 64;
pub const __SMBF: ::std::os::raw::c_uint = 128;
pub const __SAPP: ::std::os::raw::c_uint = 256;
pub const __SSTR: ::std::os::raw::c_uint = 512;
pub const __SOPT: ::std::os::raw::c_uint = 1024;
pub const __SNPT: ::std::os::raw::c_uint = 2048;
pub const __SOFF: ::std::os::raw::c_uint = 4096;
pub const __SORD: ::std::os::raw::c_uint = 8192;
pub const __SL64: ::std::os::raw::c_uint = 32768;
pub const __SNLK: ::std::os::raw::c_uint = 1;
pub const __SWID: ::std::os::raw::c_uint = 8192;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 1;
pub const _IONBF: ::std::os::raw::c_uint = 2;
pub const EOF: ::std::os::raw::c_int = -1;
pub const BUFSIZ: ::std::os::raw::c_uint = 1024;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 20;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 1024;
pub const L_tmpnam: ::std::os::raw::c_uint = 1024;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const TMP_MAX: ::std::os::raw::c_uint = 26;
pub const _U: ::std::os::raw::c_uint = 1;
pub const _L: ::std::os::raw::c_uint = 2;
pub const _N: ::std::os::raw::c_uint = 4;
pub const _S: ::std::os::raw::c_uint = 8;
pub const _P: ::std::os::raw::c_uint = 16;
pub const _C: ::std::os::raw::c_uint = 32;
pub const _X: ::std::os::raw::c_uint = 64;
pub const _B: ::std::os::raw::c_uint = 128;
pub const DEC: ::std::os::raw::c_uint = 10;
pub const HEX: ::std::os::raw::c_uint = 16;
pub const OCT: ::std::os::raw::c_uint = 8;
pub const BIN: ::std::os::raw::c_uint = 2;
pub const BYTE: ::std::os::raw::c_uint = 0;
pub const PINB0: ::std::os::raw::c_uint = 0;
pub const PINB1: ::std::os::raw::c_uint = 1;
pub const PINB2: ::std::os::raw::c_uint = 2;
pub const PINB3: ::std::os::raw::c_uint = 3;
pub const PINB4: ::std::os::raw::c_uint = 4;
pub const PINB5: ::std::os::raw::c_uint = 5;
pub const PINB6: ::std::os::raw::c_uint = 6;
pub const PINB7: ::std::os::raw::c_uint = 7;
pub const DDB0: ::std::os::raw::c_uint = 0;
pub const DDB1: ::std::os::raw::c_uint = 1;
pub const DDB2: ::std::os::raw::c_uint = 2;
pub const DDB3: ::std::os::raw::c_uint = 3;
pub const DDB4: ::std::os::raw::c_uint = 4;
pub const DDB5: ::std::os::raw::c_uint = 5;
pub const DDB6: ::std::os::raw::c_uint = 6;
pub const DDB7: ::std::os::raw::c_uint = 7;
pub const PORTB0: ::std::os::raw::c_uint = 0;
pub const PORTB1: ::std::os::raw::c_uint = 1;
pub const PORTB2: ::std::os::raw::c_uint = 2;
pub const PORTB3: ::std::os::raw::c_uint = 3;
pub const PORTB4: ::std::os::raw::c_uint = 4;
pub const PORTB5: ::std::os::raw::c_uint = 5;
pub const PORTB6: ::std::os::raw::c_uint = 6;
pub const PORTB7: ::std::os::raw::c_uint = 7;
pub const PINC0: ::std::os::raw::c_uint = 0;
pub const PINC1: ::std::os::raw::c_uint = 1;
pub const PINC2: ::std::os::raw::c_uint = 2;
pub const PINC3: ::std::os::raw::c_uint = 3;
pub const PINC4: ::std::os::raw::c_uint = 4;
pub const PINC5: ::std::os::raw::c_uint = 5;
pub const PINC6: ::std::os::raw::c_uint = 6;
pub const DDC0: ::std::os::raw::c_uint = 0;
pub const DDC1: ::std::os::raw::c_uint = 1;
pub const DDC2: ::std::os::raw::c_uint = 2;
pub const DDC3: ::std::os::raw::c_uint = 3;
pub const DDC4: ::std::os::raw::c_uint = 4;
pub const DDC5: ::std::os::raw::c_uint = 5;
pub const DDC6: ::std::os::raw::c_uint = 6;
pub const PORTC0: ::std::os::raw::c_uint = 0;
pub const PORTC1: ::std::os::raw::c_uint = 1;
pub const PORTC2: ::std::os::raw::c_uint = 2;
pub const PORTC3: ::std::os::raw::c_uint = 3;
pub const PORTC4: ::std::os::raw::c_uint = 4;
pub const PORTC5: ::std::os::raw::c_uint = 5;
pub const PORTC6: ::std::os::raw::c_uint = 6;
pub const PIND0: ::std::os::raw::c_uint = 0;
pub const PIND1: ::std::os::raw::c_uint = 1;
pub const PIND2: ::std::os::raw::c_uint = 2;
pub const PIND3: ::std::os::raw::c_uint = 3;
pub const PIND4: ::std::os::raw::c_uint = 4;
pub const PIND5: ::std::os::raw::c_uint = 5;
pub const PIND6: ::std::os::raw::c_uint = 6;
pub const PIND7: ::std::os::raw::c_uint = 7;
pub const DDD0: ::std::os::raw::c_uint = 0;
pub const DDD1: ::std::os::raw::c_uint = 1;
pub const DDD2: ::std::os::raw::c_uint = 2;
pub const DDD3: ::std::os::raw::c_uint = 3;
pub const DDD4: ::std::os::raw::c_uint = 4;
pub const DDD5: ::std::os::raw::c_uint = 5;
pub const DDD6: ::std::os::raw::c_uint = 6;
pub const DDD7: ::std::os::raw::c_uint = 7;
pub const PORTD0: ::std::os::raw::c_uint = 0;
pub const PORTD1: ::std::os::raw::c_uint = 1;
pub const PORTD2: ::std::os::raw::c_uint = 2;
pub const PORTD3: ::std::os::raw::c_uint = 3;
pub const PORTD4: ::std::os::raw::c_uint = 4;
pub const PORTD5: ::std::os::raw::c_uint = 5;
pub const PORTD6: ::std::os::raw::c_uint = 6;
pub const PORTD7: ::std::os::raw::c_uint = 7;
pub const SPIE: ::std::os::raw::c_uint = 7;
pub const SPE: ::std::os::raw::c_uint = 6;
pub const DORD: ::std::os::raw::c_uint = 5;
pub const MSTR: ::std::os::raw::c_uint = 4;
pub const CPOL: ::std::os::raw::c_uint = 3;
pub const CPHA: ::std::os::raw::c_uint = 2;
pub const SPR1: ::std::os::raw::c_uint = 1;
pub const SPR0: ::std::os::raw::c_uint = 0;
pub const SPIF: ::std::os::raw::c_uint = 7;
pub const WCOL: ::std::os::raw::c_uint = 6;
pub const SPI2X: ::std::os::raw::c_uint = 0;
pub const EIMSK_pA: ::std::os::raw::c_uint = 16777240;
pub const EIMSK_pB: ::std::os::raw::c_uint = 34537475;
pub const EIMSK_pC: ::std::os::raw::c_uint = 2025897472;
pub const EIMSK_pD: ::std::os::raw::c_uint = 3162596;
pub const EIMSK_pE: ::std::os::raw::c_uint = 2214592512;
pub const ENDPOINT_UNUSED: ::std::os::raw::c_uint = 0;
pub const ENDPOINT_TRANSIMIT_ONLY: ::std::os::raw::c_uint = 21;
pub const ENDPOINT_RECEIVE_ONLY: ::std::os::raw::c_uint = 25;
pub const ENDPOINT_TRANSMIT_AND_RECEIVE: ::std::os::raw::c_uint = 29;
pub const ENDPOINT_RECEIVE_ISOCHRONOUS: ::std::os::raw::c_uint = 24;
pub const ENDPOINT_TRANSMIT_ISOCHRONOUS: ::std::os::raw::c_uint = 20;
pub const VENDOR_ID: ::std::os::raw::c_uint = 5824;
pub const PRODUCT_ID: ::std::os::raw::c_uint = 1155;
pub const DEVICE_CLASS: ::std::os::raw::c_uint = 2;
pub const MANUFACTURER_NAME_LEN: ::std::os::raw::c_uint = 11;
pub const PRODUCT_NAME_LEN: ::std::os::raw::c_uint = 10;
pub const EP0_SIZE: ::std::os::raw::c_uint = 64;
pub const NUM_ENDPOINTS: ::std::os::raw::c_uint = 4;
pub const NUM_USB_BUFFERS: ::std::os::raw::c_uint = 12;
pub const NUM_INTERFACE: ::std::os::raw::c_uint = 2;
pub const CDC_STATUS_INTERFACE: ::std::os::raw::c_uint = 0;
pub const CDC_DATA_INTERFACE: ::std::os::raw::c_uint = 1;
pub const CDC_ACM_ENDPOINT: ::std::os::raw::c_uint = 2;
pub const CDC_RX_ENDPOINT: ::std::os::raw::c_uint = 3;
pub const CDC_TX_ENDPOINT: ::std::os::raw::c_uint = 4;
pub const CDC_ACM_SIZE: ::std::os::raw::c_uint = 16;
pub const CDC_RX_SIZE: ::std::os::raw::c_uint = 64;
pub const CDC_TX_SIZE: ::std::os::raw::c_uint = 64;
pub const ENDPOINT2_CONFIG: ::std::os::raw::c_uint = 21;
pub const ENDPOINT3_CONFIG: ::std::os::raw::c_uint = 25;
pub const ENDPOINT4_CONFIG: ::std::os::raw::c_uint = 21;
pub const USB_SERIAL_DTR: ::std::os::raw::c_uint = 1;
pub const USB_SERIAL_RTS: ::std::os::raw::c_uint = 2;
pub const MODIFIERKEY_CTRL: ::std::os::raw::c_uint = 57345;
pub const MODIFIERKEY_SHIFT: ::std::os::raw::c_uint = 57346;
pub const MODIFIERKEY_ALT: ::std::os::raw::c_uint = 57348;
pub const MODIFIERKEY_GUI: ::std::os::raw::c_uint = 57352;
pub const MODIFIERKEY_LEFT_CTRL: ::std::os::raw::c_uint = 57345;
pub const MODIFIERKEY_LEFT_SHIFT: ::std::os::raw::c_uint = 57346;
pub const MODIFIERKEY_LEFT_ALT: ::std::os::raw::c_uint = 57348;
pub const MODIFIERKEY_LEFT_GUI: ::std::os::raw::c_uint = 57352;
pub const MODIFIERKEY_RIGHT_CTRL: ::std::os::raw::c_uint = 57360;
pub const MODIFIERKEY_RIGHT_SHIFT: ::std::os::raw::c_uint = 57376;
pub const MODIFIERKEY_RIGHT_ALT: ::std::os::raw::c_uint = 57408;
pub const MODIFIERKEY_RIGHT_GUI: ::std::os::raw::c_uint = 57472;
pub const KEY_SYSTEM_POWER_DOWN: ::std::os::raw::c_uint = 57985;
pub const KEY_SYSTEM_SLEEP: ::std::os::raw::c_uint = 57986;
pub const KEY_SYSTEM_WAKE_UP: ::std::os::raw::c_uint = 57987;
pub const KEY_MEDIA_PLAY: ::std::os::raw::c_uint = 58544;
pub const KEY_MEDIA_PAUSE: ::std::os::raw::c_uint = 58545;
pub const KEY_MEDIA_RECORD: ::std::os::raw::c_uint = 58546;
pub const KEY_MEDIA_FAST_FORWARD: ::std::os::raw::c_uint = 58547;
pub const KEY_MEDIA_REWIND: ::std::os::raw::c_uint = 58548;
pub const KEY_MEDIA_NEXT_TRACK: ::std::os::raw::c_uint = 58549;
pub const KEY_MEDIA_PREV_TRACK: ::std::os::raw::c_uint = 58550;
pub const KEY_MEDIA_STOP: ::std::os::raw::c_uint = 58551;
pub const KEY_MEDIA_EJECT: ::std::os::raw::c_uint = 58552;
pub const KEY_MEDIA_RANDOM_PLAY: ::std::os::raw::c_uint = 58544;
pub const KEY_MEDIA_PLAY_PAUSE: ::std::os::raw::c_uint = 58573;
pub const KEY_MEDIA_PLAY_SKIP: ::std::os::raw::c_uint = 58574;
pub const KEY_MEDIA_MUTE: ::std::os::raw::c_uint = 58594;
pub const KEY_MEDIA_VOLUME_INC: ::std::os::raw::c_uint = 58601;
pub const KEY_MEDIA_VOLUME_DEC: ::std::os::raw::c_uint = 58602;
pub const KEY_A: ::std::os::raw::c_uint = 61444;
pub const KEY_B: ::std::os::raw::c_uint = 61445;
pub const KEY_C: ::std::os::raw::c_uint = 61446;
pub const KEY_D: ::std::os::raw::c_uint = 61447;
pub const KEY_E: ::std::os::raw::c_uint = 61448;
pub const KEY_F: ::std::os::raw::c_uint = 61449;
pub const KEY_G: ::std::os::raw::c_uint = 61450;
pub const KEY_H: ::std::os::raw::c_uint = 61451;
pub const KEY_I: ::std::os::raw::c_uint = 61452;
pub const KEY_J: ::std::os::raw::c_uint = 61453;
pub const KEY_K: ::std::os::raw::c_uint = 61454;
pub const KEY_L: ::std::os::raw::c_uint = 61455;
pub const KEY_M: ::std::os::raw::c_uint = 61456;
pub const KEY_N: ::std::os::raw::c_uint = 61457;
pub const KEY_O: ::std::os::raw::c_uint = 61458;
pub const KEY_P: ::std::os::raw::c_uint = 61459;
pub const KEY_Q: ::std::os::raw::c_uint = 61460;
pub const KEY_R: ::std::os::raw::c_uint = 61461;
pub const KEY_S: ::std::os::raw::c_uint = 61462;
pub const KEY_T: ::std::os::raw::c_uint = 61463;
pub const KEY_U: ::std::os::raw::c_uint = 61464;
pub const KEY_V: ::std::os::raw::c_uint = 61465;
pub const KEY_W: ::std::os::raw::c_uint = 61466;
pub const KEY_X: ::std::os::raw::c_uint = 61467;
pub const KEY_Y: ::std::os::raw::c_uint = 61468;
pub const KEY_Z: ::std::os::raw::c_uint = 61469;
pub const KEY_1: ::std::os::raw::c_uint = 61470;
pub const KEY_2: ::std::os::raw::c_uint = 61471;
pub const KEY_3: ::std::os::raw::c_uint = 61472;
pub const KEY_4: ::std::os::raw::c_uint = 61473;
pub const KEY_5: ::std::os::raw::c_uint = 61474;
pub const KEY_6: ::std::os::raw::c_uint = 61475;
pub const KEY_7: ::std::os::raw::c_uint = 61476;
pub const KEY_8: ::std::os::raw::c_uint = 61477;
pub const KEY_9: ::std::os::raw::c_uint = 61478;
pub const KEY_0: ::std::os::raw::c_uint = 61479;
pub const KEY_ENTER: ::std::os::raw::c_uint = 61480;
pub const KEY_ESC: ::std::os::raw::c_uint = 61481;
pub const KEY_BACKSPACE: ::std::os::raw::c_uint = 61482;
pub const KEY_TAB: ::std::os::raw::c_uint = 61483;
pub const KEY_SPACE: ::std::os::raw::c_uint = 61484;
pub const KEY_MINUS: ::std::os::raw::c_uint = 61485;
pub const KEY_EQUAL: ::std::os::raw::c_uint = 61486;
pub const KEY_LEFT_BRACE: ::std::os::raw::c_uint = 61487;
pub const KEY_RIGHT_BRACE: ::std::os::raw::c_uint = 61488;
pub const KEY_BACKSLASH: ::std::os::raw::c_uint = 61489;
pub const KEY_NON_US_NUM: ::std::os::raw::c_uint = 61490;
pub const KEY_SEMICOLON: ::std::os::raw::c_uint = 61491;
pub const KEY_QUOTE: ::std::os::raw::c_uint = 61492;
pub const KEY_TILDE: ::std::os::raw::c_uint = 61493;
pub const KEY_COMMA: ::std::os::raw::c_uint = 61494;
pub const KEY_PERIOD: ::std::os::raw::c_uint = 61495;
pub const KEY_SLASH: ::std::os::raw::c_uint = 61496;
pub const KEY_CAPS_LOCK: ::std::os::raw::c_uint = 61497;
pub const KEY_F1: ::std::os::raw::c_uint = 61498;
pub const KEY_F2: ::std::os::raw::c_uint = 61499;
pub const KEY_F3: ::std::os::raw::c_uint = 61500;
pub const KEY_F4: ::std::os::raw::c_uint = 61501;
pub const KEY_F5: ::std::os::raw::c_uint = 61502;
pub const KEY_F6: ::std::os::raw::c_uint = 61503;
pub const KEY_F7: ::std::os::raw::c_uint = 61504;
pub const KEY_F8: ::std::os::raw::c_uint = 61505;
pub const KEY_F9: ::std::os::raw::c_uint = 61506;
pub const KEY_F10: ::std::os::raw::c_uint = 61507;
pub const KEY_F11: ::std::os::raw::c_uint = 61508;
pub const KEY_F12: ::std::os::raw::c_uint = 61509;
pub const KEY_PRINTSCREEN: ::std::os::raw::c_uint = 61510;
pub const KEY_SCROLL_LOCK: ::std::os::raw::c_uint = 61511;
pub const KEY_PAUSE: ::std::os::raw::c_uint = 61512;
pub const KEY_INSERT: ::std::os::raw::c_uint = 61513;
pub const KEY_HOME: ::std::os::raw::c_uint = 61514;
pub const KEY_PAGE_UP: ::std::os::raw::c_uint = 61515;
pub const KEY_DELETE: ::std::os::raw::c_uint = 61516;
pub const KEY_END: ::std::os::raw::c_uint = 61517;
pub const KEY_PAGE_DOWN: ::std::os::raw::c_uint = 61518;
pub const KEY_RIGHT: ::std::os::raw::c_uint = 61519;
pub const KEY_LEFT: ::std::os::raw::c_uint = 61520;
pub const KEY_DOWN: ::std::os::raw::c_uint = 61521;
pub const KEY_UP: ::std::os::raw::c_uint = 61522;
pub const KEY_NUM_LOCK: ::std::os::raw::c_uint = 61523;
pub const KEYPAD_SLASH: ::std::os::raw::c_uint = 61524;
pub const KEYPAD_ASTERIX: ::std::os::raw::c_uint = 61525;
pub const KEYPAD_MINUS: ::std::os::raw::c_uint = 61526;
pub const KEYPAD_PLUS: ::std::os::raw::c_uint = 61527;
pub const KEYPAD_ENTER: ::std::os::raw::c_uint = 61528;
pub const KEYPAD_1: ::std::os::raw::c_uint = 61529;
pub const KEYPAD_2: ::std::os::raw::c_uint = 61530;
pub const KEYPAD_3: ::std::os::raw::c_uint = 61531;
pub const KEYPAD_4: ::std::os::raw::c_uint = 61532;
pub const KEYPAD_5: ::std::os::raw::c_uint = 61533;
pub const KEYPAD_6: ::std::os::raw::c_uint = 61534;
pub const KEYPAD_7: ::std::os::raw::c_uint = 61535;
pub const KEYPAD_8: ::std::os::raw::c_uint = 61536;
pub const KEYPAD_9: ::std::os::raw::c_uint = 61537;
pub const KEYPAD_0: ::std::os::raw::c_uint = 61538;
pub const KEYPAD_PERIOD: ::std::os::raw::c_uint = 61539;
pub const KEY_NON_US_BS: ::std::os::raw::c_uint = 61540;
pub const KEY_MENU: ::std::os::raw::c_uint = 61541;
pub const KEY_F13: ::std::os::raw::c_uint = 61544;
pub const KEY_F14: ::std::os::raw::c_uint = 61545;
pub const KEY_F15: ::std::os::raw::c_uint = 61546;
pub const KEY_F16: ::std::os::raw::c_uint = 61547;
pub const KEY_F17: ::std::os::raw::c_uint = 61548;
pub const KEY_F18: ::std::os::raw::c_uint = 61549;
pub const KEY_F19: ::std::os::raw::c_uint = 61550;
pub const KEY_F20: ::std::os::raw::c_uint = 61551;
pub const KEY_F21: ::std::os::raw::c_uint = 61552;
pub const KEY_F22: ::std::os::raw::c_uint = 61553;
pub const KEY_F23: ::std::os::raw::c_uint = 61554;
pub const KEY_F24: ::std::os::raw::c_uint = 61555;
pub const KEY_UP_ARROW: ::std::os::raw::c_uint = 61522;
pub const KEY_DOWN_ARROW: ::std::os::raw::c_uint = 61521;
pub const KEY_LEFT_ARROW: ::std::os::raw::c_uint = 61520;
pub const KEY_RIGHT_ARROW: ::std::os::raw::c_uint = 61519;
pub const KEY_RETURN: ::std::os::raw::c_uint = 61480;
pub const KEY_LEFT_CTRL: ::std::os::raw::c_uint = 57345;
pub const KEY_LEFT_SHIFT: ::std::os::raw::c_uint = 57346;
pub const KEY_LEFT_ALT: ::std::os::raw::c_uint = 57348;
pub const KEY_LEFT_GUI: ::std::os::raw::c_uint = 57352;
pub const KEY_RIGHT_CTRL: ::std::os::raw::c_uint = 57360;
pub const KEY_RIGHT_SHIFT: ::std::os::raw::c_uint = 57376;
pub const KEY_RIGHT_ALT: ::std::os::raw::c_uint = 57408;
pub const KEY_RIGHT_GUI: ::std::os::raw::c_uint = 57472;
pub const SHIFT_MASK: ::std::os::raw::c_uint = 64;
pub const KEYCODE_MASK: ::std::os::raw::c_uint = 127;
pub const ASCII_20: ::std::os::raw::c_uint = 61484;
pub const ASCII_21: ::std::os::raw::c_uint = 61534;
pub const ASCII_22: ::std::os::raw::c_uint = 61556;
pub const ASCII_23: ::std::os::raw::c_uint = 61536;
pub const ASCII_24: ::std::os::raw::c_uint = 61537;
pub const ASCII_25: ::std::os::raw::c_uint = 61538;
pub const ASCII_26: ::std::os::raw::c_uint = 61540;
pub const ASCII_27: ::std::os::raw::c_uint = 61492;
pub const ASCII_28: ::std::os::raw::c_uint = 61542;
pub const ASCII_29: ::std::os::raw::c_uint = 61543;
pub const ASCII_2A: ::std::os::raw::c_uint = 61541;
pub const ASCII_2B: ::std::os::raw::c_uint = 61550;
pub const ASCII_2C: ::std::os::raw::c_uint = 61494;
pub const ASCII_2D: ::std::os::raw::c_uint = 61485;
pub const ASCII_2E: ::std::os::raw::c_uint = 61495;
pub const ASCII_2F: ::std::os::raw::c_uint = 61496;
pub const ASCII_30: ::std::os::raw::c_uint = 61479;
pub const ASCII_31: ::std::os::raw::c_uint = 61470;
pub const ASCII_32: ::std::os::raw::c_uint = 61471;
pub const ASCII_33: ::std::os::raw::c_uint = 61472;
pub const ASCII_34: ::std::os::raw::c_uint = 61473;
pub const ASCII_35: ::std::os::raw::c_uint = 61474;
pub const ASCII_36: ::std::os::raw::c_uint = 61475;
pub const ASCII_37: ::std::os::raw::c_uint = 61476;
pub const ASCII_38: ::std::os::raw::c_uint = 61477;
pub const ASCII_39: ::std::os::raw::c_uint = 61478;
pub const ASCII_3A: ::std::os::raw::c_uint = 61555;
pub const ASCII_3B: ::std::os::raw::c_uint = 61491;
pub const ASCII_3C: ::std::os::raw::c_uint = 61558;
pub const ASCII_3D: ::std::os::raw::c_uint = 61486;
pub const ASCII_3E: ::std::os::raw::c_uint = 61559;
pub const ASCII_3F: ::std::os::raw::c_uint = 61560;
pub const ASCII_40: ::std::os::raw::c_uint = 61535;
pub const ASCII_41: ::std::os::raw::c_uint = 61508;
pub const ASCII_42: ::std::os::raw::c_uint = 61509;
pub const ASCII_43: ::std::os::raw::c_uint = 61510;
pub const ASCII_44: ::std::os::raw::c_uint = 61511;
pub const ASCII_45: ::std::os::raw::c_uint = 61512;
pub const ASCII_46: ::std::os::raw::c_uint = 61513;
pub const ASCII_47: ::std::os::raw::c_uint = 61514;
pub const ASCII_48: ::std::os::raw::c_uint = 61515;
pub const ASCII_49: ::std::os::raw::c_uint = 61516;
pub const ASCII_4A: ::std::os::raw::c_uint = 61517;
pub const ASCII_4B: ::std::os::raw::c_uint = 61518;
pub const ASCII_4C: ::std::os::raw::c_uint = 61519;
pub const ASCII_4D: ::std::os::raw::c_uint = 61520;
pub const ASCII_4E: ::std::os::raw::c_uint = 61521;
pub const ASCII_4F: ::std::os::raw::c_uint = 61522;
pub const ASCII_50: ::std::os::raw::c_uint = 61523;
pub const ASCII_51: ::std::os::raw::c_uint = 61524;
pub const ASCII_52: ::std::os::raw::c_uint = 61525;
pub const ASCII_53: ::std::os::raw::c_uint = 61526;
pub const ASCII_54: ::std::os::raw::c_uint = 61527;
pub const ASCII_55: ::std::os::raw::c_uint = 61528;
pub const ASCII_56: ::std::os::raw::c_uint = 61529;
pub const ASCII_57: ::std::os::raw::c_uint = 61530;
pub const ASCII_58: ::std::os::raw::c_uint = 61531;
pub const ASCII_59: ::std::os::raw::c_uint = 61532;
pub const ASCII_5A: ::std::os::raw::c_uint = 61533;
pub const ASCII_5B: ::std::os::raw::c_uint = 61487;
pub const ASCII_5C: ::std::os::raw::c_uint = 61489;
pub const ASCII_5D: ::std::os::raw::c_uint = 61488;
pub const ASCII_5E: ::std::os::raw::c_uint = 61539;
pub const ASCII_5F: ::std::os::raw::c_uint = 61549;
pub const ASCII_60: ::std::os::raw::c_uint = 61493;
pub const ASCII_61: ::std::os::raw::c_uint = 61444;
pub const ASCII_62: ::std::os::raw::c_uint = 61445;
pub const ASCII_63: ::std::os::raw::c_uint = 61446;
pub const ASCII_64: ::std::os::raw::c_uint = 61447;
pub const ASCII_65: ::std::os::raw::c_uint = 61448;
pub const ASCII_66: ::std::os::raw::c_uint = 61449;
pub const ASCII_67: ::std::os::raw::c_uint = 61450;
pub const ASCII_68: ::std::os::raw::c_uint = 61451;
pub const ASCII_69: ::std::os::raw::c_uint = 61452;
pub const ASCII_6A: ::std::os::raw::c_uint = 61453;
pub const ASCII_6B: ::std::os::raw::c_uint = 61454;
pub const ASCII_6C: ::std::os::raw::c_uint = 61455;
pub const ASCII_6D: ::std::os::raw::c_uint = 61456;
pub const ASCII_6E: ::std::os::raw::c_uint = 61457;
pub const ASCII_6F: ::std::os::raw::c_uint = 61458;
pub const ASCII_70: ::std::os::raw::c_uint = 61459;
pub const ASCII_71: ::std::os::raw::c_uint = 61460;
pub const ASCII_72: ::std::os::raw::c_uint = 61461;
pub const ASCII_73: ::std::os::raw::c_uint = 61462;
pub const ASCII_74: ::std::os::raw::c_uint = 61463;
pub const ASCII_75: ::std::os::raw::c_uint = 61464;
pub const ASCII_76: ::std::os::raw::c_uint = 61465;
pub const ASCII_77: ::std::os::raw::c_uint = 61466;
pub const ASCII_78: ::std::os::raw::c_uint = 61467;
pub const ASCII_79: ::std::os::raw::c_uint = 61468;
pub const ASCII_7A: ::std::os::raw::c_uint = 61469;
pub const ASCII_7B: ::std::os::raw::c_uint = 61551;
pub const ASCII_7C: ::std::os::raw::c_uint = 61553;
pub const ASCII_7D: ::std::os::raw::c_uint = 61552;
pub const ASCII_7E: ::std::os::raw::c_uint = 61557;
pub const ASCII_7F: ::std::os::raw::c_uint = 61482;
pub const SPI_HAS_TRANSACTION: ::std::os::raw::c_uint = 1;
pub const SPI_MODE0: ::std::os::raw::c_uint = 0;
pub const SPI_MODE1: ::std::os::raw::c_uint = 4;
pub const SPI_MODE2: ::std::os::raw::c_uint = 8;
pub const SPI_MODE3: ::std::os::raw::c_uint = 12;
pub const SPI_CLOCK_DIV4: ::std::os::raw::c_uint = 0;
pub const SPI_CLOCK_DIV16: ::std::os::raw::c_uint = 1;
pub const SPI_CLOCK_DIV64: ::std::os::raw::c_uint = 2;
pub const SPI_CLOCK_DIV128: ::std::os::raw::c_uint = 3;
pub const SPI_CLOCK_DIV2: ::std::os::raw::c_uint = 4;
pub const SPI_CLOCK_DIV8: ::std::os::raw::c_uint = 5;
pub const SPI_CLOCK_DIV32: ::std::os::raw::c_uint = 6;
pub const SPI_MODE_MASK: ::std::os::raw::c_uint = 12;
pub const SPI_CLOCK_MASK: ::std::os::raw::c_uint = 3;
pub const SPI_2XCLOCK_MASK: ::std::os::raw::c_uint = 1;
pub const SPI_HAS_NOTUSINGINTERRUPT: ::std::os::raw::c_uint = 1;
pub const BUFFER_LENGTH: ::std::os::raw::c_uint = 32;
pub const WIRE_HAS_END: ::std::os::raw::c_uint = 1;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_1 {
    pub __max_align_ll: ::std::os::raw::c_longlong,
    pub __max_align_ld: f64,
}
impl Clone for _bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
pub type max_align_t = _bindgen_ty_1;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __int_least8_t = ::std::os::raw::c_char;
pub type __uint_least8_t = ::std::os::raw::c_uchar;
pub type __int_least16_t = ::std::os::raw::c_short;
pub type __uint_least16_t = ::std::os::raw::c_ushort;
pub type __int_least32_t = ::std::os::raw::c_int;
pub type __uint_least32_t = ::std::os::raw::c_uint;
pub type __int_least64_t = ::std::os::raw::c_longlong;
pub type __uint_least64_t = ::std::os::raw::c_ulonglong;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __uintptr_t = ::std::os::raw::c_ulong;
pub type _LOCK_T = ::std::os::raw::c_int;
pub type _LOCK_RECURSIVE_T = ::std::os::raw::c_int;
pub type _off_t = ::std::os::raw::c_long;
pub type __dev_t = ::std::os::raw::c_short;
pub type __uid_t = ::std::os::raw::c_ushort;
pub type __gid_t = ::std::os::raw::c_ushort;
pub type _off64_t = ::std::os::raw::c_longlong;
pub type _fpos_t = ::std::os::raw::c_long;
pub type _ssize_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct _bindgen_ty_2 {
    pub __count: ::std::os::raw::c_int,
    pub __value: _bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_2__bindgen_ty_1 {
    pub __wch: wint_t,
    pub __wchb: [::std::os::raw::c_uchar; 4usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_2__bindgen_ty_1>() , 4usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_2__bindgen_ty_1>() ,
               4usize);
}
impl Clone for _bindgen_ty_2__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_2>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_2>() , 4usize);
}
impl Clone for _bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
pub type _mbstate_t = _bindgen_ty_2;
pub type _flock_t = _LOCK_RECURSIVE_T;
pub type _iconv_t = *mut ::std::os::raw::c_void;
pub type __ULong = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct _reent {
    pub _errno: ::std::os::raw::c_int,
    pub _stdin: *mut __FILE,
    pub _stdout: *mut __FILE,
    pub _stderr: *mut __FILE,
    pub _inc: ::std::os::raw::c_int,
    pub _emergency: [::std::os::raw::c_uchar; 25usize],
    pub _current_category: ::std::os::raw::c_int,
    pub _current_locale: *const ::std::os::raw::c_uchar,
    pub __sdidinit: ::std::os::raw::c_int,
    pub __cleanup: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut _reent)>,
    pub _result: *mut _Bigint,
    pub _result_k: ::std::os::raw::c_int,
    pub _p5s: *mut _Bigint,
    pub _freelist: *mut *mut _Bigint,
    pub _cvtlen: ::std::os::raw::c_int,
    pub _cvtbuf: *mut ::std::os::raw::c_uchar,
    pub _new: _reent__bindgen_ty_1,
    pub _atexit: *mut _atexit,
    pub _atexit0: _atexit,
    pub _sig_func: *mut ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       ::std::os::raw::c_int)>,
    pub __sglue: _glue,
    pub __sf: [__FILE; 3usize],
}
#[repr(C)]
#[derive(Copy)]
pub union _reent__bindgen_ty_1 {
    pub _reent: _reent__bindgen_ty_1__bindgen_ty_1,
    pub _unused: _reent__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy)]
pub struct _reent__bindgen_ty_1__bindgen_ty_1 {
    pub _unused_rand: ::std::os::raw::c_uint,
    pub _strtok_last: *mut ::std::os::raw::c_uchar,
    pub _asctime_buf: [::std::os::raw::c_uchar; 26usize],
    pub _localtime_buf: __tm,
    pub _gamma_signgam: ::std::os::raw::c_int,
    pub _rand_next: ::std::os::raw::c_ulonglong,
    pub _r48: _rand48,
    pub _mblen_state: _mbstate_t,
    pub _mbtowc_state: _mbstate_t,
    pub _wctomb_state: _mbstate_t,
    pub _l64a_buf: [::std::os::raw::c_uchar; 8usize],
    pub _signal_buf: [::std::os::raw::c_uchar; 24usize],
    pub _getdate_err: ::std::os::raw::c_int,
    pub _mbrlen_state: _mbstate_t,
    pub _mbrtowc_state: _mbstate_t,
    pub _mbsrtowcs_state: _mbstate_t,
    pub _wcrtomb_state: _mbstate_t,
    pub _wcsrtombs_state: _mbstate_t,
    pub _h_errno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__reent__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_reent__bindgen_ty_1__bindgen_ty_1>() ,
               208usize);
    assert_eq!(::std::mem::align_of::<_reent__bindgen_ty_1__bindgen_ty_1>() ,
               8usize);
}
impl Clone for _reent__bindgen_ty_1__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _reent__bindgen_ty_1__bindgen_ty_2 {
    pub _nextf: [*mut ::std::os::raw::c_uchar; 30usize],
    pub _nmalloc: [::std::os::raw::c_uint; 30usize],
}
#[test]
fn bindgen_test_layout__reent__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<_reent__bindgen_ty_1__bindgen_ty_2>() ,
               240usize);
    assert_eq!(::std::mem::align_of::<_reent__bindgen_ty_1__bindgen_ty_2>() ,
               4usize);
}
impl Clone for _reent__bindgen_ty_1__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__reent__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_reent__bindgen_ty_1>() , 240usize);
    assert_eq!(::std::mem::align_of::<_reent__bindgen_ty_1>() , 8usize);
}
impl Clone for _reent__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__reent() {
    assert_eq!(::std::mem::size_of::<_reent>() , 1064usize);
    assert_eq!(::std::mem::align_of::<_reent>() , 8usize);
}
impl Clone for _reent {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _Bigint {
    pub _next: *mut _Bigint,
    pub _k: ::std::os::raw::c_int,
    pub _maxwds: ::std::os::raw::c_int,
    pub _sign: ::std::os::raw::c_int,
    pub _wds: ::std::os::raw::c_int,
    pub _x: [__ULong; 1usize],
}
#[test]
fn bindgen_test_layout__Bigint() {
    assert_eq!(::std::mem::size_of::<_Bigint>() , 24usize);
    assert_eq!(::std::mem::align_of::<_Bigint>() , 4usize);
}
impl Clone for _Bigint {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __tm {
    pub __tm_sec: ::std::os::raw::c_int,
    pub __tm_min: ::std::os::raw::c_int,
    pub __tm_hour: ::std::os::raw::c_int,
    pub __tm_mday: ::std::os::raw::c_int,
    pub __tm_mon: ::std::os::raw::c_int,
    pub __tm_year: ::std::os::raw::c_int,
    pub __tm_wday: ::std::os::raw::c_int,
    pub __tm_yday: ::std::os::raw::c_int,
    pub __tm_isdst: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___tm() {
    assert_eq!(::std::mem::size_of::<__tm>() , 36usize);
    assert_eq!(::std::mem::align_of::<__tm>() , 4usize);
}
impl Clone for __tm {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _on_exit_args {
    pub _fnargs: [*mut ::std::os::raw::c_void; 32usize],
    pub _dso_handle: [*mut ::std::os::raw::c_void; 32usize],
    pub _fntypes: __ULong,
    pub _is_cxa: __ULong,
}
#[test]
fn bindgen_test_layout__on_exit_args() {
    assert_eq!(::std::mem::size_of::<_on_exit_args>() , 264usize);
    assert_eq!(::std::mem::align_of::<_on_exit_args>() , 4usize);
}
impl Clone for _on_exit_args {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _atexit {
    pub _next: *mut _atexit,
    pub _ind: ::std::os::raw::c_int,
    pub _fns: [::std::option::Option<unsafe extern "C" fn()>; 32usize],
    pub _on_exit_args: _on_exit_args,
}
#[test]
fn bindgen_test_layout__atexit() {
    assert_eq!(::std::mem::size_of::<_atexit>() , 400usize);
    assert_eq!(::std::mem::align_of::<_atexit>() , 4usize);
}
impl Clone for _atexit {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(::std::mem::size_of::<__sbuf>() , 8usize);
    assert_eq!(::std::mem::align_of::<__sbuf>() , 4usize);
}
impl Clone for __sbuf {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _read: ::std::option::Option<unsafe extern "C" fn(arg1: *mut _reent,
                                                          arg2:
                                                              *mut ::std::os::raw::c_void,
                                                          arg3:
                                                              *mut ::std::os::raw::c_uchar,
                                                          arg4:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
    pub _write: ::std::option::Option<unsafe extern "C" fn(arg1: *mut _reent,
                                                           arg2:
                                                               *mut ::std::os::raw::c_void,
                                                           arg3:
                                                               *const ::std::os::raw::c_uchar,
                                                           arg4:
                                                               ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub _seek: ::std::option::Option<unsafe extern "C" fn(arg1: *mut _reent,
                                                          arg2:
                                                              *mut ::std::os::raw::c_void,
                                                          arg3: _fpos_t,
                                                          arg4:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_long>,
    pub _close: ::std::option::Option<unsafe extern "C" fn(arg1: *mut _reent,
                                                           arg2:
                                                               *mut ::std::os::raw::c_void)
                                          -> ::std::os::raw::c_int>,
    pub _ub: __sbuf,
    pub _up: *mut ::std::os::raw::c_uchar,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: _off_t,
    pub _data: *mut _reent,
    pub _lock: _flock_t,
    pub _mbstate: _mbstate_t,
    pub _flags2: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(::std::mem::size_of::<__sFILE>() , 104usize);
    assert_eq!(::std::mem::align_of::<__sFILE>() , 4usize);
}
impl Clone for __sFILE {
    fn clone(&self) -> Self { *self }
}
pub type __FILE = __sFILE;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _glue {
    pub _next: *mut _glue,
    pub _niobs: ::std::os::raw::c_int,
    pub _iobs: *mut __FILE,
}
#[test]
fn bindgen_test_layout__glue() {
    assert_eq!(::std::mem::size_of::<_glue>() , 12usize);
    assert_eq!(::std::mem::align_of::<_glue>() , 4usize);
}
impl Clone for _glue {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _rand48 {
    pub _seed: [::std::os::raw::c_ushort; 3usize],
    pub _mult: [::std::os::raw::c_ushort; 3usize],
    pub _add: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__rand48() {
    assert_eq!(::std::mem::size_of::<_rand48>() , 14usize);
    assert_eq!(::std::mem::align_of::<_rand48>() , 2usize);
}
impl Clone for _rand48 {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "_impure_ptr"]
    pub static mut _impure_ptr: *mut _reent;
}
extern "C" {
    #[link_name = "_global_impure_ptr"]
    pub static _global_impure_ptr: *const _reent;
}
extern "C" {
    pub fn _reclaim_reent(arg1: *mut _reent);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_3 {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__bindgen_ty_3() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_3>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_3>() , 4usize);
}
impl Clone for _bindgen_ty_3 {
    fn clone(&self) -> Self { *self }
}
pub type div_t = _bindgen_ty_3;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_4 {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__bindgen_ty_4() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_4>() , 8usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_4>() , 4usize);
}
impl Clone for _bindgen_ty_4 {
    fn clone(&self) -> Self { *self }
}
pub type ldiv_t = _bindgen_ty_4;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_5 {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__bindgen_ty_5() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_5>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_5>() , 8usize);
}
impl Clone for _bindgen_ty_5 {
    fn clone(&self) -> Self { *self }
}
pub type lldiv_t = _bindgen_ty_5;
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn __locale_mb_cur_max() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_uchar) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoi_r(arg1: *mut _reent, __nptr: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atol_r(arg1: *mut _reent, __nptr: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: usize,
                   __size: usize, _compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn getenv(__string: *const ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _getenv_r(arg1: *mut _reent,
                     __string: *const ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _findenv(arg1: *const ::std::os::raw::c_uchar,
                    arg2: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _findenv_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar,
                      arg3: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mblen(arg1: *const ::std::os::raw::c_uchar, arg2: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar,
                    arg3: usize, arg4: *mut _mbstate_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(arg1: *mut u16, arg2: *const ::std::os::raw::c_uchar,
                  arg3: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_r(arg1: *mut _reent, arg2: *mut u16,
                     arg3: *const ::std::os::raw::c_uchar, arg4: usize,
                     arg5: *mut _mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_uchar, arg2: u16)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar,
                     arg3: u16, arg4: *mut _mbstate_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut u16, arg2: *const ::std::os::raw::c_uchar,
                    arg3: usize) -> usize;
}
extern "C" {
    pub fn _mbstowcs_r(arg1: *mut _reent, arg2: *mut u16,
                       arg3: *const ::std::os::raw::c_uchar, arg4: usize,
                       arg5: *mut _mbstate_t) -> usize;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_uchar, arg2: *const u16,
                    arg3: usize) -> usize;
}
extern "C" {
    pub fn _wcstombs_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar,
                       arg3: *const u16, arg4: usize, arg5: *mut _mbstate_t)
     -> usize;
}
extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: usize,
                 __size: usize, _compar: __compar_fn_t);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realloc(__r: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(__n: *const ::std::os::raw::c_uchar,
                  __end_PTR: *mut *mut ::std::os::raw::c_uchar) -> f64;
}
extern "C" {
    pub fn _strtod_r(arg1: *mut _reent, __n: *const ::std::os::raw::c_uchar,
                     __end_PTR: *mut *mut ::std::os::raw::c_uchar) -> f64;
}
extern "C" {
    pub fn strtof(__n: *const ::std::os::raw::c_uchar,
                  __end_PTR: *mut *mut ::std::os::raw::c_uchar) -> f32;
}
extern "C" {
    pub fn strtol(__n: *const ::std::os::raw::c_uchar,
                  __end_PTR: *mut *mut ::std::os::raw::c_uchar,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_r(arg1: *mut _reent, __n: *const ::std::os::raw::c_uchar,
                     __end_PTR: *mut *mut ::std::os::raw::c_uchar,
                     __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(__n: *const ::std::os::raw::c_uchar,
                   __end_PTR: *mut *mut ::std::os::raw::c_uchar,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_r(arg1: *mut _reent, __n: *const ::std::os::raw::c_uchar,
                      __end_PTR: *mut *mut ::std::os::raw::c_uchar,
                      __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn system(__string: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn __itoa(arg1: ::std::os::raw::c_int,
                  arg2: *mut ::std::os::raw::c_uchar,
                  arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn __utoa(arg1: ::std::os::raw::c_uint,
                  arg2: *mut ::std::os::raw::c_uchar,
                  arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn strtoll(__n: *const ::std::os::raw::c_uchar,
                   __end_PTR: *mut *mut ::std::os::raw::c_uchar,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(__n: *const ::std::os::raw::c_uchar,
                    __end_PTR: *mut *mut ::std::os::raw::c_uchar,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _dtoa_r(arg1: *mut _reent, arg2: f64, arg3: ::std::os::raw::c_int,
                   arg4: ::std::os::raw::c_int,
                   arg5: *mut ::std::os::raw::c_int,
                   arg6: *mut ::std::os::raw::c_int,
                   arg7: *mut *mut ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _malloc_r(arg1: *mut _reent, arg2: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _calloc_r(arg1: *mut _reent, arg2: usize, arg3: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _realloc_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_void,
                      arg3: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _mstats_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn _system_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __eprintf(arg1: *const ::std::os::raw::c_uchar,
                     arg2: *const ::std::os::raw::c_uchar,
                     arg3: ::std::os::raw::c_uint,
                     arg4: *const ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn strtold(arg1: *const ::std::os::raw::c_uchar,
                   arg2: *mut *mut ::std::os::raw::c_uchar) -> f64;
}
extern "C" {
    pub fn memchr(arg1: *const ::std::os::raw::c_void,
                  arg2: ::std::os::raw::c_int, arg3: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(arg1: *const ::std::os::raw::c_void,
                  arg2: *const ::std::os::raw::c_void, arg3: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(arg1: *mut ::std::os::raw::c_void,
                  arg2: *const ::std::os::raw::c_void, arg3: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(arg1: *mut ::std::os::raw::c_void,
                   arg2: *const ::std::os::raw::c_void, arg3: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(arg1: *mut ::std::os::raw::c_void,
                  arg2: ::std::os::raw::c_int, arg3: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(arg1: *mut ::std::os::raw::c_uchar,
                  arg2: *const ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strchr(arg1: *const ::std::os::raw::c_uchar,
                  arg2: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strcmp(arg1: *const ::std::os::raw::c_uchar,
                  arg2: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(arg1: *const ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(arg1: *mut ::std::os::raw::c_uchar,
                  arg2: *const ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strcspn(arg1: *const ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar) -> usize;
}
extern "C" {
    pub fn strerror(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strlen(arg1: *const ::std::os::raw::c_uchar) -> usize;
}
extern "C" {
    pub fn strncat(arg1: *mut ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar, arg3: usize)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strncmp(arg1: *const ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar, arg3: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(arg1: *mut ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar, arg3: usize)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strpbrk(arg1: *const ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strrchr(arg1: *const ::std::os::raw::c_uchar,
                   arg2: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strspn(arg1: *const ::std::os::raw::c_uchar,
                  arg2: *const ::std::os::raw::c_uchar) -> usize;
}
extern "C" {
    pub fn strstr(arg1: *const ::std::os::raw::c_uchar,
                  arg2: *const ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strtok(arg1: *mut ::std::os::raw::c_uchar,
                  arg2: *const ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strxfrm(arg1: *mut ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar, arg3: usize)
     -> usize;
}
extern "C" {
    pub fn strtok_r(arg1: *mut ::std::os::raw::c_uchar,
                    arg2: *const ::std::os::raw::c_uchar,
                    arg3: *mut *mut ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn bcmp(arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void, arg3: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(arg1: *const ::std::os::raw::c_void,
                 arg2: *mut ::std::os::raw::c_void, arg3: usize);
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn index(arg1: *const ::std::os::raw::c_uchar,
                 arg2: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn memccpy(arg1: *mut ::std::os::raw::c_void,
                   arg2: *const ::std::os::raw::c_void,
                   arg3: ::std::os::raw::c_int, arg4: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memrchr(arg1: *const ::std::os::raw::c_void,
                   arg2: ::std::os::raw::c_int, arg3: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rindex(arg1: *const ::std::os::raw::c_uchar,
                  arg2: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stpcpy(arg1: *mut ::std::os::raw::c_uchar,
                  arg2: *const ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn stpncpy(arg1: *mut ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar, arg3: usize)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strcasecmp(arg1: *const ::std::os::raw::c_uchar,
                      arg2: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(arg1: *const ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strndup(arg1: *const ::std::os::raw::c_uchar, arg2: usize)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "__xpg_strerror_r"]
    pub fn strerror_r(arg1: ::std::os::raw::c_int,
                      arg2: *mut ::std::os::raw::c_uchar, arg3: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strerror_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int,
                       arg3: ::std::os::raw::c_int,
                       arg4: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strlcat(arg1: *mut ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar, arg3: usize)
     -> usize;
}
extern "C" {
    pub fn strlcpy(arg1: *mut ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar, arg3: usize)
     -> usize;
}
extern "C" {
    pub fn strncasecmp(arg1: *const ::std::os::raw::c_uchar,
                       arg2: *const ::std::os::raw::c_uchar, arg3: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnlen(arg1: *const ::std::os::raw::c_uchar, arg2: usize)
     -> usize;
}
extern "C" {
    pub fn strsep(arg1: *mut *mut ::std::os::raw::c_uchar,
                  arg2: *const ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn strsignal(__signo: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_uchar;
}
#[repr(C)]
#[derive(Copy)]
pub union __dmath {
    pub d: f64,
    pub i: [__ULong; 2usize],
}
#[test]
fn bindgen_test_layout___dmath() {
    assert_eq!(::std::mem::size_of::<__dmath>() , 8usize);
    assert_eq!(::std::mem::align_of::<__dmath>() , 8usize);
}
impl Clone for __dmath {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __fmath {
    pub f: f32,
    pub i: [__ULong; 1usize],
}
#[test]
fn bindgen_test_layout___fmath() {
    assert_eq!(::std::mem::size_of::<__fmath>() , 4usize);
    assert_eq!(::std::mem::align_of::<__fmath>() , 4usize);
}
impl Clone for __fmath {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub union __ldmath {
    pub ld: f64,
    pub i: [__ULong; 4usize],
}
#[test]
fn bindgen_test_layout___ldmath() {
    assert_eq!(::std::mem::size_of::<__ldmath>() , 16usize);
    assert_eq!(::std::mem::align_of::<__ldmath>() , 8usize);
}
impl Clone for __ldmath {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __isinff(x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isinfd(x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnanf(x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isnand(x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyf(x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyd(x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitd(x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn infinity() -> f64;
}
extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_uchar) -> f64;
}
extern "C" {
    pub fn finite(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn infinityf() -> f32;
}
extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_uchar) -> f32;
}
extern "C" {
    pub fn finitef(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: f64) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn logl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_uchar) -> f64;
}
extern "C" {
    pub fn ilogbl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lrintl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn roundl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lroundl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn truncl(arg1: f64) -> f64;
}
extern "C" {
    pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn fdiml(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn sincos(arg1: f64, arg2: *mut f64, arg3: *mut f64);
}
extern "C" {
    pub fn gamma_r(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn dremf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn sincosf(arg1: f32, arg2: *mut f32, arg3: *mut f32);
}
extern "C" {
    pub fn gammaf_r(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn exp10(arg1: f64) -> f64;
}
extern "C" {
    pub fn pow10(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn pow10f(arg1: f32) -> f32;
}
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type int_fast16_t = ::std::os::raw::c_short;
pub type uint_fast16_t = ::std::os::raw::c_ushort;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_6 {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout__bindgen_ty_6() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_6>() , 16usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_6>() , 8usize);
}
impl Clone for _bindgen_ty_6 {
    fn clone(&self) -> Self { *self }
}
pub type imaxdiv_t = _bindgen_ty_6;
extern "C" {
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(numer: intmax_t, denomer: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(arg1: *const ::std::os::raw::c_uchar,
                     arg2: *mut *mut ::std::os::raw::c_uchar,
                     arg3: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(arg1: *const ::std::os::raw::c_uchar,
                     arg2: *mut *mut ::std::os::raw::c_uchar,
                     arg3: ::std::os::raw::c_int) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(arg1: *const u16, arg2: *mut *mut u16,
                     arg3: ::std::os::raw::c_int) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(arg1: *const u16, arg2: *mut *mut u16,
                     arg3: ::std::os::raw::c_int) -> uintmax_t;
}
pub type prog_void = ::std::os::raw::c_void;
pub type prog_char = ::std::os::raw::c_uchar;
pub type prog_uchar = ::std::os::raw::c_uchar;
pub type prog_int8_t = i8;
pub type prog_uint8_t = u8;
pub type prog_int16_t = i16;
pub type prog_uint16_t = u16;
pub type prog_int32_t = i32;
pub type prog_uint32_t = u32;
pub type prog_int64_t = i64;
pub type prog_uint64_t = u64;
extern "C" {
    pub fn eeprom_initialize();
}
extern "C" {
    pub fn eeprom_read_byte(addr: *const u8) -> u8;
}
extern "C" {
    pub fn eeprom_read_word(addr: *const u16) -> u16;
}
extern "C" {
    pub fn eeprom_read_dword(addr: *const u32) -> u32;
}
extern "C" {
    pub fn eeprom_read_block(buf: *mut ::std::os::raw::c_void,
                             addr: *const ::std::os::raw::c_void, len: u32);
}
extern "C" {
    pub fn eeprom_write_byte(addr: *mut u8, value: u8);
}
extern "C" {
    pub fn eeprom_write_word(addr: *mut u16, value: u16);
}
extern "C" {
    pub fn eeprom_write_dword(addr: *mut u32, value: u32);
}
extern "C" {
    pub fn eeprom_write_block(buf: *const ::std::os::raw::c_void,
                              addr: *mut ::std::os::raw::c_void, len: u32);
}
extern "C" {
    pub fn eeprom_is_ready() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZL17eeprom_read_floatPKf"]
    pub fn eeprom_read_float(addr: *const f32) -> f32;
}
extern "C" {
    #[link_name = "_ZL18eeprom_write_floatPff"]
    pub fn eeprom_write_float(addr: *mut f32, value: f32);
}
extern "C" {
    #[link_name = "_ZL18eeprom_update_bytePhh"]
    pub fn eeprom_update_byte(addr: *mut u8, value: u8);
}
extern "C" {
    #[link_name = "_ZL18eeprom_update_wordPtt"]
    pub fn eeprom_update_word(addr: *mut u16, value: u16);
}
extern "C" {
    #[link_name = "_ZL19eeprom_update_dwordPjj"]
    pub fn eeprom_update_dword(addr: *mut u32, value: u32);
}
extern "C" {
    #[link_name = "_ZL19eeprom_update_floatPff"]
    pub fn eeprom_update_float(addr: *mut f32, value: f32);
}
extern "C" {
    #[link_name = "_ZL19eeprom_update_blockPKvPvj"]
    pub fn eeprom_update_block(buf: *const ::std::os::raw::c_void,
                               addr: *mut ::std::os::raw::c_void, len: u32);
}
extern "C" {
    pub fn ultoa(val: ::std::os::raw::c_ulong,
                 buf: *mut ::std::os::raw::c_uchar,
                 radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn ltoa(val: ::std::os::raw::c_long,
                buf: *mut ::std::os::raw::c_uchar,
                radix: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn dtostrf(val: f32, width: ::std::os::raw::c_int,
                   precision: ::std::os::raw::c_uint,
                   buf: *mut ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IRQ_NUMBER_t {
    IRQ_DMA_CH0 = 0,
    IRQ_DMA_CH1 = 1,
    IRQ_DMA_CH2 = 2,
    IRQ_DMA_CH3 = 3,
    IRQ_DMA_ERROR = 4,
    IRQ_FTFL_COMPLETE = 6,
    IRQ_FTFL_COLLISION = 7,
    IRQ_LOW_VOLTAGE = 8,
    IRQ_LLWU = 9,
    IRQ_WDOG = 10,
    IRQ_I2C0 = 11,
    IRQ_SPI0 = 12,
    IRQ_I2S0_TX = 13,
    IRQ_I2S0_RX = 14,
    IRQ_UART0_LON = 15,
    IRQ_UART0_STATUS = 16,
    IRQ_UART0_ERROR = 17,
    IRQ_UART1_STATUS = 18,
    IRQ_UART1_ERROR = 19,
    IRQ_UART2_STATUS = 20,
    IRQ_UART2_ERROR = 21,
    IRQ_ADC0 = 22,
    IRQ_CMP0 = 23,
    IRQ_CMP1 = 24,
    IRQ_FTM0 = 25,
    IRQ_FTM1 = 26,
    IRQ_CMT = 27,
    IRQ_RTC_ALARM = 28,
    IRQ_RTC_SECOND = 29,
    IRQ_PIT_CH0 = 30,
    IRQ_PIT_CH1 = 31,
    IRQ_PIT_CH2 = 32,
    IRQ_PIT_CH3 = 33,
    IRQ_PDB = 34,
    IRQ_USBOTG = 35,
    IRQ_USBDCD = 36,
    IRQ_TSI = 37,
    IRQ_MCG = 38,
    IRQ_LPTMR = 39,
    IRQ_PORTA = 40,
    IRQ_PORTB = 41,
    IRQ_PORTC = 42,
    IRQ_PORTD = 43,
    IRQ_PORTE = 44,
    IRQ_SOFTWARE = 45,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_7 {
    pub C1: u8,
    pub C2: u8,
    pub C3: u8,
    pub C4: u8,
    pub C5: u8,
    pub C6: u8,
    pub S: u8,
    pub unused1: u8,
    pub SC: u8,
    pub unused2: u8,
    pub ATCVH: u8,
    pub ATCVL: u8,
    pub C7: u8,
    pub C8: u8,
    pub C9: u8,
    pub unused3: u8,
    pub C11: u8,
    pub C12: u8,
    pub S2: u8,
    pub T3: u8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_7() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_7>() , 20usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_7>() , 1usize);
}
impl Clone for _bindgen_ty_7 {
    fn clone(&self) -> Self { *self }
}
pub type KINETIS_MCG_t = _bindgen_ty_7;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_8 {
    pub MCR: u32,
    pub unused1: u32,
    pub TCR: u32,
    pub CTAR0: u32,
    pub CTAR1: u32,
    pub CTAR2: u32,
    pub CTAR3: u32,
    pub CTAR4: u32,
    pub CTAR5: u32,
    pub CTAR6: u32,
    pub CTAR7: u32,
    pub SR: u32,
    pub RSER: u32,
    pub PUSHR: u32,
    pub POPR: u32,
    pub TXFR: [u32; 16usize],
    pub RXFR: [u32; 16usize],
}
#[test]
fn bindgen_test_layout__bindgen_ty_8() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_8>() , 188usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_8>() , 4usize);
}
impl Clone for _bindgen_ty_8 {
    fn clone(&self) -> Self { *self }
}
pub type KINETISK_SPI_t = _bindgen_ty_8;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_9 {
    pub A1: u8,
    pub F: u8,
    pub C1: u8,
    pub S: u8,
    pub D: u8,
    pub C2: u8,
    pub FLT: u8,
    pub RA: u8,
    pub SMB: u8,
    pub A2: u8,
    pub SLTH: u8,
    pub SLTL: u8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_9() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_9>() , 12usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_9>() , 1usize);
}
impl Clone for _bindgen_ty_9 {
    fn clone(&self) -> Self { *self }
}
pub type KINETIS_I2C_t = _bindgen_ty_9;
#[repr(C, packed)]
#[derive(Copy)]
pub struct _bindgen_ty_10 {
    pub BDH: u8,
    pub BDL: u8,
    pub C1: u8,
    pub C2: u8,
    pub S1: u8,
    pub S2: u8,
    pub C3: u8,
    pub D: u8,
    pub MA1: u8,
    pub MA2: u8,
    pub C4: u8,
    pub C5: u8,
    pub ED: u8,
    pub MODEM: u8,
    pub IR: u8,
    pub unused1: u8,
    pub PFIFO: u8,
    pub CFIFO: u8,
    pub SFIFO: u8,
    pub TWFIFO: u8,
    pub TCFIFO: u8,
    pub RWFIFO: u8,
    pub RCFIFO: u8,
    pub unused2: u8,
    pub C7816: u8,
    pub IE7816: u8,
    pub IS7816: u8,
    pub __bindgen_anon_1: _bindgen_ty_10__bindgen_ty_1,
    pub WN7816: u8,
    pub WF7816: u8,
    pub ET7816: u8,
    pub TL7816: u8,
    pub unused3: u8,
    pub C6: u8,
    pub PCTH: u8,
    pub PCTL: u8,
    pub B1T: u8,
    pub SDTH: u8,
    pub SDTL: u8,
    pub PRE: u8,
    pub TPL: u8,
    pub IE: u8,
    pub WB: u8,
    pub S3: u8,
    pub S4: u8,
    pub RPL: u8,
    pub RPREL: u8,
    pub CPW: u8,
    pub RIDT: u8,
    pub TIDT: u8,
}
#[repr(C)]
#[derive(Copy)]
pub union _bindgen_ty_10__bindgen_ty_1 {
    pub WP7816T0: u8,
    pub WP7816T1: u8,
}
#[test]
fn bindgen_test_layout__bindgen_ty_10__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_10__bindgen_ty_1>() ,
               1usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_10__bindgen_ty_1>() ,
               1usize);
}
impl Clone for _bindgen_ty_10__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout__bindgen_ty_10() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_10>() , 50usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_10>() , 1usize);
}
impl Clone for _bindgen_ty_10 {
    fn clone(&self) -> Self { *self }
}
pub type KINETISK_UART_t = _bindgen_ty_10;
///////////////////////////////////
#[repr(C, packed)]
#[derive(Debug, Copy)]
pub struct _bindgen_ty_11 {
    pub BAUD: u32,
    pub STAT: u32,
    pub CTRL: u32,
    pub DATA: u32,
    pub MATCH: u32,
    pub MODIR: u32,
}
#[test]
fn bindgen_test_layout__bindgen_ty_11() {
    assert_eq!(::std::mem::size_of::<_bindgen_ty_11>() , 24usize);
    assert_eq!(::std::mem::align_of::<_bindgen_ty_11>() , 1usize);
}
impl Clone for _bindgen_ty_11 {
    fn clone(&self) -> Self { *self }
}
pub type KINETISK_LPUART_t = _bindgen_ty_11;
extern "C" {
    pub fn nvic_execution_priority() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nmi_isr();
}
extern "C" {
    pub fn hard_fault_isr();
}
extern "C" {
    pub fn memmanage_fault_isr();
}
extern "C" {
    pub fn bus_fault_isr();
}
extern "C" {
    pub fn usage_fault_isr();
}
extern "C" {
    pub fn svcall_isr();
}
extern "C" {
    pub fn debugmonitor_isr();
}
extern "C" {
    pub fn pendablesrvreq_isr();
}
extern "C" {
    pub fn systick_isr();
}
extern "C" {
    pub fn dma_ch0_isr();
}
extern "C" {
    pub fn dma_ch1_isr();
}
extern "C" {
    pub fn dma_ch2_isr();
}
extern "C" {
    pub fn dma_ch3_isr();
}
extern "C" {
    pub fn dma_ch4_isr();
}
extern "C" {
    pub fn dma_ch5_isr();
}
extern "C" {
    pub fn dma_ch6_isr();
}
extern "C" {
    pub fn dma_ch7_isr();
}
extern "C" {
    pub fn dma_ch8_isr();
}
extern "C" {
    pub fn dma_ch9_isr();
}
extern "C" {
    pub fn dma_ch10_isr();
}
extern "C" {
    pub fn dma_ch11_isr();
}
extern "C" {
    pub fn dma_ch12_isr();
}
extern "C" {
    pub fn dma_ch13_isr();
}
extern "C" {
    pub fn dma_ch14_isr();
}
extern "C" {
    pub fn dma_ch15_isr();
}
extern "C" {
    pub fn dma_error_isr();
}
extern "C" {
    pub fn mcm_isr();
}
extern "C" {
    pub fn randnum_isr();
}
extern "C" {
    pub fn flash_cmd_isr();
}
extern "C" {
    pub fn flash_error_isr();
}
extern "C" {
    pub fn low_voltage_isr();
}
extern "C" {
    pub fn wakeup_isr();
}
extern "C" {
    pub fn watchdog_isr();
}
extern "C" {
    pub fn i2c0_isr();
}
extern "C" {
    pub fn i2c1_isr();
}
extern "C" {
    pub fn i2c2_isr();
}
extern "C" {
    pub fn i2c3_isr();
}
extern "C" {
    pub fn spi0_isr();
}
extern "C" {
    pub fn spi1_isr();
}
extern "C" {
    pub fn spi2_isr();
}
extern "C" {
    pub fn sdhc_isr();
}
extern "C" {
    pub fn enet_timer_isr();
}
extern "C" {
    pub fn enet_tx_isr();
}
extern "C" {
    pub fn enet_rx_isr();
}
extern "C" {
    pub fn enet_error_isr();
}
extern "C" {
    pub fn can0_message_isr();
}
extern "C" {
    pub fn can0_bus_off_isr();
}
extern "C" {
    pub fn can0_error_isr();
}
extern "C" {
    pub fn can0_tx_warn_isr();
}
extern "C" {
    pub fn can0_rx_warn_isr();
}
extern "C" {
    pub fn can0_wakeup_isr();
}
extern "C" {
    pub fn can1_message_isr();
}
extern "C" {
    pub fn can1_bus_off_isr();
}
extern "C" {
    pub fn can1_error_isr();
}
extern "C" {
    pub fn can1_tx_warn_isr();
}
extern "C" {
    pub fn can1_rx_warn_isr();
}
extern "C" {
    pub fn can1_wakeup_isr();
}
extern "C" {
    pub fn i2s0_tx_isr();
}
extern "C" {
    pub fn i2s0_rx_isr();
}
extern "C" {
    pub fn i2s0_isr();
}
extern "C" {
    pub fn uart0_lon_isr();
}
extern "C" {
    pub fn uart0_status_isr();
}
extern "C" {
    pub fn uart0_error_isr();
}
extern "C" {
    pub fn uart1_status_isr();
}
extern "C" {
    pub fn uart1_error_isr();
}
extern "C" {
    pub fn uart2_status_isr();
}
extern "C" {
    pub fn uart2_error_isr();
}
extern "C" {
    pub fn uart3_status_isr();
}
extern "C" {
    pub fn uart3_error_isr();
}
extern "C" {
    pub fn uart4_status_isr();
}
extern "C" {
    pub fn uart4_error_isr();
}
extern "C" {
    pub fn uart5_status_isr();
}
extern "C" {
    pub fn uart5_error_isr();
}
extern "C" {
    pub fn lpuart0_status_isr();
}
extern "C" {
    pub fn adc0_isr();
}
extern "C" {
    pub fn adc1_isr();
}
extern "C" {
    pub fn cmp0_isr();
}
extern "C" {
    pub fn cmp1_isr();
}
extern "C" {
    pub fn cmp2_isr();
}
extern "C" {
    pub fn cmp3_isr();
}
extern "C" {
    pub fn ftm0_isr();
}
extern "C" {
    pub fn ftm1_isr();
}
extern "C" {
    pub fn ftm2_isr();
}
extern "C" {
    pub fn ftm3_isr();
}
extern "C" {
    pub fn tpm0_isr();
}
extern "C" {
    pub fn tpm1_isr();
}
extern "C" {
    pub fn tpm2_isr();
}
extern "C" {
    pub fn cmt_isr();
}
extern "C" {
    pub fn rtc_alarm_isr();
}
extern "C" {
    pub fn rtc_seconds_isr();
}
extern "C" {
    pub fn pit0_isr();
}
extern "C" {
    pub fn pit1_isr();
}
extern "C" {
    pub fn pit2_isr();
}
extern "C" {
    pub fn pit3_isr();
}
extern "C" {
    pub fn pit_isr();
}
extern "C" {
    pub fn pdb_isr();
}
extern "C" {
    pub fn usb_isr();
}
extern "C" {
    pub fn usb_charge_isr();
}
extern "C" {
    pub fn usbhs_isr();
}
extern "C" {
    pub fn usbhs_phy_isr();
}
extern "C" {
    pub fn dac0_isr();
}
extern "C" {
    pub fn dac1_isr();
}
extern "C" {
    pub fn tsi0_isr();
}
extern "C" {
    pub fn mcg_isr();
}
extern "C" {
    pub fn lptmr_isr();
}
extern "C" {
    pub fn porta_isr();
}
extern "C" {
    pub fn portb_isr();
}
extern "C" {
    pub fn portc_isr();
}
extern "C" {
    pub fn portd_isr();
}
extern "C" {
    pub fn porte_isr();
}
extern "C" {
    pub fn portcd_isr();
}
extern "C" {
    pub fn software_isr();
}
extern "C" {
    #[link_name = "_VectorsRam"]
    pub static mut _VectorsRam:
               [::std::option::Option<unsafe extern "C" fn()>; 62usize];
}
extern "C" {
    #[link_name = "_VectorsFlash"]
    pub static mut _VectorsFlash:
               [::std::option::Option<unsafe extern "C" fn()>; 62usize];
}
pub const A0: u8 = 14;
pub const A1: u8 = 15;
pub const A2: u8 = 16;
pub const A3: u8 = 17;
pub const A4: u8 = 18;
pub const A5: u8 = 19;
pub const A6: u8 = 20;
pub const A7: u8 = 21;
pub const A8: u8 = 22;
pub const A9: u8 = 23;
pub const A10: u8 = 34;
pub const A11: u8 = 35;
pub const A12: u8 = 36;
pub const A13: u8 = 37;
pub const SS: u8 = 10;
pub const MOSI: u8 = 11;
pub const MISO: u8 = 12;
pub const SCK: u8 = 13;
pub const SDA: u8 = 18;
pub const SCL: u8 = 19;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct digital_pin_bitband_and_config_table_struct {
    pub reg: *mut u32,
    pub config: *mut u32,
}
#[test]
fn bindgen_test_layout_digital_pin_bitband_and_config_table_struct() {
    assert_eq!(::std::mem::size_of::<digital_pin_bitband_and_config_table_struct>()
               , 8usize);
    assert_eq!(::std::mem::align_of::<digital_pin_bitband_and_config_table_struct>()
               , 4usize);
}
impl Clone for digital_pin_bitband_and_config_table_struct {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "digital_pin_to_info_PGM"]
    pub static mut digital_pin_to_info_PGM:
               *const digital_pin_bitband_and_config_table_struct;
}
extern "C" {
    #[link_name = "_ZL17digitalPinToTimerh"]
    pub fn digitalPinToTimer(arg1: u8) -> u8;
}
extern "C" {
    pub fn digitalWrite(pin: u8, val: u8);
}
extern "C" {
    #[link_name = "_ZL16digitalWriteFasthh"]
    pub fn digitalWriteFast(pin: u8, val: u8);
}
extern "C" {
    pub fn digitalRead(pin: u8) -> u8;
}
extern "C" {
    #[link_name = "_ZL15digitalReadFasth"]
    pub fn digitalReadFast(pin: u8) -> u8;
}
extern "C" {
    pub fn pinMode(pin: u8, mode: u8);
}
extern "C" {
    pub fn init_pins();
}
extern "C" {
    pub fn analogWrite(pin: u8, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn analogWriteRes(bits: u32);
}
extern "C" {
    #[link_name = "_ZL21analogWriteResolutionj"]
    pub fn analogWriteResolution(bits: u32);
}
extern "C" {
    pub fn analogWriteFrequency(pin: u8, frequency: f32);
}
extern "C" {
    pub fn analogWriteDAC0(val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn analogWriteDAC1(val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn attachInterruptVector(irq: IRQ_NUMBER_t,
                                 function:
                                     ::std::option::Option<unsafe extern "C" fn()>);
}
extern "C" {
    pub fn attachInterrupt(pin: u8,
                           function:
                               ::std::option::Option<unsafe extern "C" fn()>,
                           mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn detachInterrupt(pin: u8);
}
extern "C" {
    pub fn _init_Teensyduino_internal_();
}
extern "C" {
    pub fn analogRead(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn analogReference(type_: u8);
}
extern "C" {
    pub fn analogReadRes(bits: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "_ZL20analogReadResolutionj"]
    pub fn analogReadResolution(bits: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn analogReadAveraging(num: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn analog_init();
}
extern "C" {
    pub fn touchRead(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZL8shiftOuthhhh"]
    pub fn shiftOut(arg1: u8, arg2: u8, arg3: u8, arg4: u8);
}
extern "C" {
    pub fn _shiftOut(dataPin: u8, clockPin: u8, bitOrder: u8, value: u8);
}
extern "C" {
    pub fn shiftOut_lsbFirst(dataPin: u8, clockPin: u8, value: u8);
}
extern "C" {
    pub fn shiftOut_msbFirst(dataPin: u8, clockPin: u8, value: u8);
}
extern "C" {
    #[link_name = "_ZL7shiftInhhh"]
    pub fn shiftIn(arg1: u8, arg2: u8, arg3: u8) -> u8;
}
extern "C" {
    pub fn _shiftIn(dataPin: u8, clockPin: u8, bitOrder: u8) -> u8;
}
extern "C" {
    pub fn shiftIn_lsbFirst(dataPin: u8, clockPin: u8) -> u8;
}
extern "C" {
    pub fn shiftIn_msbFirst(dataPin: u8, clockPin: u8) -> u8;
}
extern "C" {
    pub fn _reboot_Teensyduino_();
}
extern "C" {
    pub fn _restart_Teensyduino_();
}
extern "C" {
    #[link_name = "yield"]
    pub fn yield_();
}
extern "C" {
    pub fn delay(msec: u32);
}
extern "C" {
    #[link_name = "systick_millis_count"]
    pub static mut systick_millis_count: u32;
}
extern "C" {
    #[link_name = "_ZL6millisv"]
    pub fn millis() -> u32;
}
extern "C" {
    pub fn micros() -> u32;
}
extern "C" {
    #[link_name = "_ZL17delayMicrosecondsj"]
    pub fn delayMicroseconds(arg1: u32);
}
extern "C" {
    pub fn rtc_get() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn rtc_set(t: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn rtc_compensate(adjust: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct teensy3_clock_class {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_teensy3_clock_class() {
    assert_eq!(::std::mem::size_of::<teensy3_clock_class>() , 1usize);
    assert_eq!(::std::mem::align_of::<teensy3_clock_class>() , 1usize);
}
impl Clone for teensy3_clock_class {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "Teensy3Clock"]
    pub static mut Teensy3Clock: teensy3_clock_class;
}
pub type word = ::std::os::raw::c_uint;
pub type byte = u8;
extern "C" {
    pub fn pulseIn(pin: u8, state: u8, timeout: u32) -> u32;
}
extern "C" {
    pub fn setup();
}
extern "C" {
    #[link_name = "loop"]
    pub fn loop_();
}
pub type boolean = bool;
extern "C" {
    pub fn serial_begin(divisor: u32);
}
extern "C" {
    pub fn serial_format(format: u32);
}
extern "C" {
    pub fn serial_end();
}
extern "C" {
    pub fn serial_set_transmit_pin(pin: u8);
}
extern "C" {
    pub fn serial_set_rx(pin: u8);
}
extern "C" {
    pub fn serial_set_tx(pin: u8, opendrain: u8);
}
extern "C" {
    pub fn serial_set_rts(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial_set_cts(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial_putchar(c: u32);
}
extern "C" {
    pub fn serial_write(buf: *const ::std::os::raw::c_void,
                        count: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn serial_flush();
}
extern "C" {
    pub fn serial_write_buffer_free() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial_available() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial_getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial_peek() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial_clear();
}
extern "C" {
    pub fn serial_print(p: *const ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn serial_phex(n: u32);
}
extern "C" {
    pub fn serial_phex16(n: u32);
}
extern "C" {
    pub fn serial_phex32(n: u32);
}
extern "C" {
    pub fn serial2_begin(divisor: u32);
}
extern "C" {
    pub fn serial2_format(format: u32);
}
extern "C" {
    pub fn serial2_end();
}
extern "C" {
    pub fn serial2_set_transmit_pin(pin: u8);
}
extern "C" {
    pub fn serial2_set_rx(pin: u8);
}
extern "C" {
    pub fn serial2_set_tx(pin: u8, opendrain: u8);
}
extern "C" {
    pub fn serial2_set_rts(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial2_set_cts(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial2_putchar(c: u32);
}
extern "C" {
    pub fn serial2_write(buf: *const ::std::os::raw::c_void,
                         count: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn serial2_flush();
}
extern "C" {
    pub fn serial2_write_buffer_free() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial2_available() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial2_getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial2_peek() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial2_clear();
}
extern "C" {
    pub fn serial3_begin(divisor: u32);
}
extern "C" {
    pub fn serial3_format(format: u32);
}
extern "C" {
    pub fn serial3_end();
}
extern "C" {
    pub fn serial3_set_transmit_pin(pin: u8);
}
extern "C" {
    pub fn serial3_set_rx(pin: u8);
}
extern "C" {
    pub fn serial3_set_tx(pin: u8, opendrain: u8);
}
extern "C" {
    pub fn serial3_set_rts(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial3_set_cts(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial3_putchar(c: u32);
}
extern "C" {
    pub fn serial3_write(buf: *const ::std::os::raw::c_void,
                         count: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn serial3_flush();
}
extern "C" {
    pub fn serial3_write_buffer_free() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial3_available() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial3_getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial3_peek() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial3_clear();
}
extern "C" {
    pub fn serial4_begin(divisor: u32);
}
extern "C" {
    pub fn serial4_format(format: u32);
}
extern "C" {
    pub fn serial4_end();
}
extern "C" {
    pub fn serial4_set_transmit_pin(pin: u8);
}
extern "C" {
    pub fn serial4_set_rx(pin: u8);
}
extern "C" {
    pub fn serial4_set_tx(pin: u8, opendrain: u8);
}
extern "C" {
    pub fn serial4_set_rts(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial4_set_cts(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial4_putchar(c: u32);
}
extern "C" {
    pub fn serial4_write(buf: *const ::std::os::raw::c_void,
                         count: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn serial4_flush();
}
extern "C" {
    pub fn serial4_write_buffer_free() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial4_available() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial4_getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial4_peek() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial4_clear();
}
extern "C" {
    pub fn serial5_begin(divisor: u32);
}
extern "C" {
    pub fn serial5_format(format: u32);
}
extern "C" {
    pub fn serial5_end();
}
extern "C" {
    pub fn serial5_set_transmit_pin(pin: u8);
}
extern "C" {
    pub fn serial5_set_rx(pin: u8);
}
extern "C" {
    pub fn serial5_set_tx(pin: u8, opendrain: u8);
}
extern "C" {
    pub fn serial5_set_rts(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial5_set_cts(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial5_putchar(c: u32);
}
extern "C" {
    pub fn serial5_write(buf: *const ::std::os::raw::c_void,
                         count: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn serial5_flush();
}
extern "C" {
    pub fn serial5_write_buffer_free() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial5_available() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial5_getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial5_peek() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial5_clear();
}
extern "C" {
    pub fn serial6_begin(divisor: u32);
}
extern "C" {
    pub fn serial6_format(format: u32);
}
extern "C" {
    pub fn serial6_end();
}
extern "C" {
    pub fn serial6_set_transmit_pin(pin: u8);
}
extern "C" {
    pub fn serial6_set_rx(pin: u8);
}
extern "C" {
    pub fn serial6_set_tx(pin: u8, opendrain: u8);
}
extern "C" {
    pub fn serial6_set_rts(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial6_set_cts(pin: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial6_putchar(c: u32);
}
extern "C" {
    pub fn serial6_write(buf: *const ::std::os::raw::c_void,
                         count: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn serial6_flush();
}
extern "C" {
    pub fn serial6_write_buffer_free() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial6_available() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial6_getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial6_peek() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serial6_clear();
}
pub type __gnuc_va_list = __builtin_va_list;
pub type __off_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
pub type __loff_t = ::std::os::raw::c_longlong;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type ulong = ::std::os::raw::c_ulong;
pub type clock_t = ::std::os::raw::c_ulong;
pub type time_t = ::std::os::raw::c_long;
pub type daddr_t = ::std::os::raw::c_long;
pub type caddr_t = *mut ::std::os::raw::c_uchar;
pub type ino_t = ::std::os::raw::c_ushort;
pub type off_t = _off_t;
pub type dev_t = __dev_t;
pub type uid_t = __uid_t;
pub type gid_t = __gid_t;
pub type pid_t = ::std::os::raw::c_int;
pub type key_t = ::std::os::raw::c_long;
pub type mode_t = ::std::os::raw::c_uint;
pub type nlink_t = ::std::os::raw::c_ushort;
pub type fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _types_fd_set {
    pub fds_bits: [fd_mask; 2usize],
}
#[test]
fn bindgen_test_layout__types_fd_set() {
    assert_eq!(::std::mem::size_of::<_types_fd_set>() , 8usize);
    assert_eq!(::std::mem::align_of::<_types_fd_set>() , 4usize);
}
impl Clone for _types_fd_set {
    fn clone(&self) -> Self { *self }
}
pub type clockid_t = ::std::os::raw::c_ulong;
pub type timer_t = ::std::os::raw::c_ulong;
pub type useconds_t = ::std::os::raw::c_ulong;
pub type suseconds_t = __suseconds_t;
pub type sbintime_t = __int64_t;
pub type FILE = __FILE;
pub type fpos_t = _fpos_t;
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn tempnam(arg1: *const ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freopen(arg1: *const ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar, arg3: *mut FILE)
     -> *mut FILE;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_uchar,
                   arg3: ::std::os::raw::c_int, arg4: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(arg1: *const ::std::os::raw::c_uchar,
                  arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_uchar,
                    arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(arg1: *const ::std::os::raw::c_uchar, arg2: __gnuc_va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(arg1: *mut ::std::os::raw::c_uchar,
                    arg2: *const ::std::os::raw::c_uchar,
                    arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(arg1: *mut ::std::os::raw::c_uchar,
                 arg2: ::std::os::raw::c_int, arg3: *mut FILE)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_uchar, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(arg1: *mut ::std::os::raw::c_void, _size: usize, _n: usize,
                 arg2: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite(arg1: *const ::std::os::raw::c_void, _size: usize,
                  _n: usize, arg2: *mut FILE) -> usize;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(arg1: *mut FILE, arg2: ::std::os::raw::c_long,
                 arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn fopen(_name: *const ::std::os::raw::c_uchar,
                 _type: *const ::std::os::raw::c_uchar) -> *mut FILE;
}
extern "C" {
    pub fn sprintf(arg1: *mut ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(arg1: *const ::std::os::raw::c_uchar,
                  arg2: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asiprintf(arg1: *mut *mut ::std::os::raw::c_uchar,
                     arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asniprintf(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut usize,
                      arg3: *const ::std::os::raw::c_uchar, ...)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn asnprintf(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut usize,
                     arg3: *const ::std::os::raw::c_uchar, ...)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn asprintf(arg1: *mut *mut ::std::os::raw::c_uchar,
                    arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn diprintf(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fiprintf(arg1: *mut FILE,
                    arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fiscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iprintf(arg1: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscanf(arg1: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siprintf(arg1: *mut ::std::os::raw::c_uchar,
                    arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siscanf(arg1: *const ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(arg1: *mut ::std::os::raw::c_uchar, arg2: usize,
                    arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sniprintf(arg1: *mut ::std::os::raw::c_uchar, arg2: usize,
                     arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasiprintf(arg1: *mut *mut ::std::os::raw::c_uchar,
                      arg2: *const ::std::os::raw::c_uchar,
                      arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasniprintf(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut usize,
                       arg3: *const ::std::os::raw::c_uchar,
                       arg4: __gnuc_va_list) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn vasnprintf(arg1: *mut ::std::os::raw::c_uchar, arg2: *mut usize,
                      arg3: *const ::std::os::raw::c_uchar,
                      arg4: __gnuc_va_list) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn vasprintf(arg1: *mut *mut ::std::os::raw::c_uchar,
                     arg2: *const ::std::os::raw::c_uchar,
                     arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdiprintf(arg1: ::std::os::raw::c_int,
                     arg2: *const ::std::os::raw::c_uchar,
                     arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfiprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_uchar,
                     arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfiscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_uchar,
                    arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_uchar,
                   arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn viprintf(arg1: *const ::std::os::raw::c_uchar,
                    arg2: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn viscanf(arg1: *const ::std::os::raw::c_uchar, arg2: __gnuc_va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(arg1: *const ::std::os::raw::c_uchar, arg2: __gnuc_va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsiprintf(arg1: *mut ::std::os::raw::c_uchar,
                     arg2: *const ::std::os::raw::c_uchar,
                     arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsiscanf(arg1: *const ::std::os::raw::c_uchar,
                    arg2: *const ::std::os::raw::c_uchar,
                    arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsniprintf(arg1: *mut ::std::os::raw::c_uchar, arg2: usize,
                      arg3: *const ::std::os::raw::c_uchar,
                      arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(arg1: *mut ::std::os::raw::c_uchar, arg2: usize,
                     arg3: *const ::std::os::raw::c_uchar,
                     arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(arg1: *const ::std::os::raw::c_uchar,
                   arg2: *const ::std::os::raw::c_uchar, arg3: __gnuc_va_list)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _asiprintf_r(arg1: *mut _reent,
                        arg2: *mut *mut ::std::os::raw::c_uchar,
                        arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _asniprintf_r(arg1: *mut _reent,
                         arg2: *mut ::std::os::raw::c_uchar, arg3: *mut usize,
                         arg4: *const ::std::os::raw::c_uchar, ...)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _asnprintf_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar,
                        arg3: *mut usize,
                        arg4: *const ::std::os::raw::c_uchar, ...)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _asprintf_r(arg1: *mut _reent,
                       arg2: *mut *mut ::std::os::raw::c_uchar,
                       arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _diprintf_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int,
                       arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _dprintf_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int,
                      arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fclose_r(arg1: *mut _reent, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall_r(arg1: *mut _reent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int,
                     arg3: *const ::std::os::raw::c_uchar) -> *mut FILE;
}
extern "C" {
    pub fn _fflush_r(arg1: *mut _reent, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_r(arg1: *mut _reent, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_unlocked_r(arg1: *mut _reent, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgets_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar,
                    arg3: ::std::os::raw::c_int, arg4: *mut FILE)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _fgets_unlocked_r(arg1: *mut _reent,
                             arg2: *mut ::std::os::raw::c_uchar,
                             arg3: ::std::os::raw::c_int, arg4: *mut FILE)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _fgetpos_r(arg1: *mut _reent, arg2: *mut FILE, arg3: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fsetpos_r(arg1: *mut _reent, arg2: *mut FILE, arg3: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fiprintf_r(arg1: *mut _reent, arg2: *mut FILE,
                       arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fiscanf_r(arg1: *mut _reent, arg2: *mut FILE,
                      arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fmemopen_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_void,
                       arg3: usize, arg4: *const ::std::os::raw::c_uchar)
     -> *mut FILE;
}
extern "C" {
    pub fn _fopen_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar,
                    arg3: *const ::std::os::raw::c_uchar) -> *mut FILE;
}
extern "C" {
    pub fn _freopen_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar,
                      arg3: *const ::std::os::raw::c_uchar, arg4: *mut FILE)
     -> *mut FILE;
}
extern "C" {
    pub fn _fprintf_r(arg1: *mut _reent, arg2: *mut FILE,
                      arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fpurge_r(arg1: *mut _reent, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int,
                    arg3: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_unlocked_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int,
                             arg3: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputs_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar,
                    arg3: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputs_unlocked_r(arg1: *mut _reent,
                             arg2: *const ::std::os::raw::c_uchar,
                             arg3: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_void,
                    _size: usize, _n: usize, arg3: *mut FILE) -> usize;
}
extern "C" {
    pub fn _fread_unlocked_r(arg1: *mut _reent,
                             arg2: *mut ::std::os::raw::c_void, _size: usize,
                             _n: usize, arg3: *mut FILE) -> usize;
}
extern "C" {
    pub fn _fscanf_r(arg1: *mut _reent, arg2: *mut FILE,
                     arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseek_r(arg1: *mut _reent, arg2: *mut FILE,
                    arg3: ::std::os::raw::c_long, arg4: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeko_r(arg1: *mut _reent, arg2: *mut FILE, arg3: _off_t,
                     arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_r(arg1: *mut _reent, arg2: *mut FILE)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftello_r(arg1: *mut _reent, arg2: *mut FILE) -> _off_t;
}
extern "C" {
    pub fn _rewind_r(arg1: *mut _reent, arg2: *mut FILE);
}
extern "C" {
    pub fn _fwrite_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_void,
                     _size: usize, _n: usize, arg3: *mut FILE) -> usize;
}
extern "C" {
    pub fn _fwrite_unlocked_r(arg1: *mut _reent,
                              arg2: *const ::std::os::raw::c_void,
                              _size: usize, _n: usize, arg3: *mut FILE)
     -> usize;
}
extern "C" {
    pub fn _getc_r(arg1: *mut _reent, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getc_unlocked_r(arg1: *mut _reent, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getchar_r(arg1: *mut _reent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getchar_unlocked_r(arg1: *mut _reent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _gets_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _iprintf_r(arg1: *mut _reent,
                      arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iscanf_r(arg1: *mut _reent,
                     arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _open_memstream_r(arg1: *mut _reent,
                             arg2: *mut *mut ::std::os::raw::c_uchar,
                             arg3: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn _perror_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn _printf_r(arg1: *mut _reent,
                     arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int,
                   arg3: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_unlocked_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int,
                            arg3: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putchar_unlocked_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putchar_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _puts_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _remove_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _rename_r(arg1: *mut _reent, _old: *const ::std::os::raw::c_uchar,
                     _new: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _scanf_r(arg1: *mut _reent,
                    arg2: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _siprintf_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar,
                       arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _siscanf_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar,
                      arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _sniprintf_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar,
                        arg3: usize,
                        arg4: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _snprintf_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar,
                       arg3: usize, arg4: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _sprintf_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar,
                      arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _sscanf_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar,
                     arg3: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar,
                      arg3: *const ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _tmpfile_r(arg1: *mut _reent) -> *mut FILE;
}
extern "C" {
    pub fn _tmpnam_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _ungetc_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int,
                     arg3: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vasiprintf_r(arg1: *mut _reent,
                         arg2: *mut *mut ::std::os::raw::c_uchar,
                         arg3: *const ::std::os::raw::c_uchar,
                         arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vasniprintf_r(arg1: *mut _reent,
                          arg2: *mut ::std::os::raw::c_uchar,
                          arg3: *mut usize,
                          arg4: *const ::std::os::raw::c_uchar,
                          arg5: __gnuc_va_list)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _vasnprintf_r(arg1: *mut _reent,
                         arg2: *mut ::std::os::raw::c_uchar, arg3: *mut usize,
                         arg4: *const ::std::os::raw::c_uchar,
                         arg5: __gnuc_va_list)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn _vasprintf_r(arg1: *mut _reent,
                        arg2: *mut *mut ::std::os::raw::c_uchar,
                        arg3: *const ::std::os::raw::c_uchar,
                        arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vdiprintf_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int,
                        arg3: *const ::std::os::raw::c_uchar,
                        arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vdprintf_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int,
                       arg3: *const ::std::os::raw::c_uchar,
                       arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vfiprintf_r(arg1: *mut _reent, arg2: *mut FILE,
                        arg3: *const ::std::os::raw::c_uchar,
                        arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vfiscanf_r(arg1: *mut _reent, arg2: *mut FILE,
                       arg3: *const ::std::os::raw::c_uchar,
                       arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vfprintf_r(arg1: *mut _reent, arg2: *mut FILE,
                       arg3: *const ::std::os::raw::c_uchar,
                       arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vfscanf_r(arg1: *mut _reent, arg2: *mut FILE,
                      arg3: *const ::std::os::raw::c_uchar,
                      arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _viprintf_r(arg1: *mut _reent,
                       arg2: *const ::std::os::raw::c_uchar,
                       arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _viscanf_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar,
                      arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vprintf_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar,
                      arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vscanf_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar,
                     arg3: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vsiprintf_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar,
                        arg3: *const ::std::os::raw::c_uchar,
                        arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vsiscanf_r(arg1: *mut _reent,
                       arg2: *const ::std::os::raw::c_uchar,
                       arg3: *const ::std::os::raw::c_uchar,
                       arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vsniprintf_r(arg1: *mut _reent,
                         arg2: *mut ::std::os::raw::c_uchar, arg3: usize,
                         arg4: *const ::std::os::raw::c_uchar,
                         arg5: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vsnprintf_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar,
                        arg3: usize, arg4: *const ::std::os::raw::c_uchar,
                        arg5: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vsprintf_r(arg1: *mut _reent, arg2: *mut ::std::os::raw::c_uchar,
                       arg3: *const ::std::os::raw::c_uchar,
                       arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _vsscanf_r(arg1: *mut _reent, arg2: *const ::std::os::raw::c_uchar,
                      arg3: *const ::std::os::raw::c_uchar,
                      arg4: __gnuc_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __getdelim(arg1: *mut *mut ::std::os::raw::c_uchar,
                      arg2: *mut usize, arg3: ::std::os::raw::c_int,
                      arg4: *mut FILE) -> isize;
}
extern "C" {
    pub fn __getline(arg1: *mut *mut ::std::os::raw::c_uchar,
                     arg2: *mut usize, arg3: *mut FILE) -> isize;
}
extern "C" {
    pub fn clearerr_unlocked(arg1: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread_unlocked(arg1: *mut ::std::os::raw::c_void, _size: usize,
                          _n: usize, arg2: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(arg1: *const ::std::os::raw::c_void, _size: usize,
                           _n: usize, arg2: *mut FILE) -> usize;
}
extern "C" {
    pub fn __srget_r(arg1: *mut _reent, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf_r(arg1: *mut _reent, arg2: ::std::os::raw::c_int,
                     arg3: *mut FILE) -> ::std::os::raw::c_int;
}
pub type va_list = __gnuc_va_list;
extern "C" {
    pub fn isalnum(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__ctype_ptr__"]
    pub static mut __ctype_ptr__: *const ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "_ctype_"]
    pub static mut _ctype_: *const ::std::os::raw::c_uchar;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __FlashStringHelper {
    pub _address: u8,
}
impl Clone for __FlashStringHelper {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug)]
pub struct StringSumHelper {
    pub _base: String,
}
#[test]
fn bindgen_test_layout_StringSumHelper() {
    assert_eq!(::std::mem::size_of::<StringSumHelper>() , 16usize);
    assert_eq!(::std::mem::align_of::<StringSumHelper>() , 4usize);
}
#[repr(C)]
#[derive(Debug)]
pub struct String {
    pub buffer: *mut ::std::os::raw::c_uchar,
    pub capacity: ::std::os::raw::c_uint,
    pub len: ::std::os::raw::c_uint,
    pub flags: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_String() {
    assert_eq!(::std::mem::size_of::<String>() , 16usize);
    assert_eq!(::std::mem::align_of::<String>() , 4usize);
}
extern "C" {
    #[link_name = "_ZN6String7reserveEj"]
    pub fn String_reserve(this: *mut String, size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "_ZN6String4copyEPKcj"]
    pub fn String_copy(this: *mut String,
                       cstr: *const ::std::os::raw::c_uchar,
                       length: ::std::os::raw::c_uint) -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String4moveERS_"]
    pub fn String_move(this: *mut String, rhs: *mut String);
}
extern "C" {
    #[link_name = "_ZN6String6appendERKS_"]
    pub fn String_append(this: *mut String, str: *const String)
     -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String6appendEPKc"]
    pub fn String_append1(this: *mut String,
                          cstr: *const ::std::os::raw::c_uchar)
     -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String6appendEc"]
    pub fn String_append2(this: *mut String, c: ::std::os::raw::c_uchar)
     -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String6appendEi"]
    pub fn String_append3(this: *mut String, num: ::std::os::raw::c_int)
     -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String6appendEj"]
    pub fn String_append4(this: *mut String, num: ::std::os::raw::c_uint)
     -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String6appendEl"]
    pub fn String_append5(this: *mut String, num: ::std::os::raw::c_long)
     -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String6appendEm"]
    pub fn String_append6(this: *mut String, num: ::std::os::raw::c_ulong)
     -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String6appendEf"]
    pub fn String_append7(this: *mut String, num: f32) -> *mut String;
}
extern "C" {
    #[link_name = "_ZNK6String9compareToERKS_"]
    pub fn String_compareTo(this: *const String, s: *const String)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZNK6String6equalsERKS_"]
    pub fn String_equals(this: *const String, s: *const String)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "_ZNK6String6equalsEPKc"]
    pub fn String_equals1(this: *const String,
                          cstr: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "_ZNK6String16equalsIgnoreCaseERKS_"]
    pub fn String_equalsIgnoreCase(this: *const String, s: *const String)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "_ZNK6String10startsWithERKS_"]
    pub fn String_startsWith(this: *const String, prefix: *const String)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "_ZNK6String10startsWithERKS_j"]
    pub fn String_startsWith1(this: *const String, prefix: *const String,
                              offset: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "_ZNK6String8endsWithERKS_"]
    pub fn String_endsWith(this: *const String, suffix: *const String)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "_ZNK6String6charAtEj"]
    pub fn String_charAt(this: *const String, index: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "_ZN6String9setCharAtEjc"]
    pub fn String_setCharAt(this: *mut String, index: ::std::os::raw::c_uint,
                            c: ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "_ZNK6String8getBytesEPhjj"]
    pub fn String_getBytes(this: *const String,
                           buf: *mut ::std::os::raw::c_uchar,
                           bufsize: ::std::os::raw::c_uint,
                           index: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "_ZNK6String7indexOfEc"]
    pub fn String_indexOf(this: *const String, ch: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZNK6String7indexOfEcj"]
    pub fn String_indexOf1(this: *const String, ch: ::std::os::raw::c_uchar,
                           fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZNK6String7indexOfERKS_"]
    pub fn String_indexOf2(this: *const String, str: *const String)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZNK6String7indexOfERKS_j"]
    pub fn String_indexOf3(this: *const String, str: *const String,
                           fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZNK6String11lastIndexOfEc"]
    pub fn String_lastIndexOf(this: *const String,
                              ch: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZNK6String11lastIndexOfEcj"]
    pub fn String_lastIndexOf1(this: *const String,
                               ch: ::std::os::raw::c_uchar,
                               fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZNK6String11lastIndexOfERKS_"]
    pub fn String_lastIndexOf2(this: *const String, str: *const String)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZNK6String11lastIndexOfERKS_j"]
    pub fn String_lastIndexOf3(this: *const String, str: *const String,
                               fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZNK6String9substringEj"]
    pub fn String_substring(this: *const String,
                            beginIndex: ::std::os::raw::c_uint) -> String;
}
extern "C" {
    #[link_name = "_ZNK6String9substringEjj"]
    pub fn String_substring1(this: *const String,
                             beginIndex: ::std::os::raw::c_uint,
                             endIndex: ::std::os::raw::c_uint) -> String;
}
extern "C" {
    #[link_name = "_ZN6String7replaceEcc"]
    pub fn String_replace(this: *mut String, find: ::std::os::raw::c_uchar,
                          replace: ::std::os::raw::c_uchar) -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String7replaceERKS_S1_"]
    pub fn String_replace1(this: *mut String, find: *const String,
                           replace: *const String) -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String6removeEj"]
    pub fn String_remove(this: *mut String, index: ::std::os::raw::c_uint)
     -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String6removeEjj"]
    pub fn String_remove1(this: *mut String, index: ::std::os::raw::c_uint,
                          count: ::std::os::raw::c_uint) -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String11toLowerCaseEv"]
    pub fn String_toLowerCase(this: *mut String) -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String11toUpperCaseEv"]
    pub fn String_toUpperCase(this: *mut String) -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6String4trimEv"]
    pub fn String_trim(this: *mut String) -> *mut String;
}
extern "C" {
    #[link_name = "_ZNK6String5toIntEv"]
    pub fn String_toInt(this: *const String) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "_ZNK6String7toFloatEv"]
    pub fn String_toFloat(this: *const String) -> f32;
}
extern "C" {
    #[link_name = "_ZN6String4initEv"]
    pub fn String_init(this: *mut String);
}
extern "C" {
    #[link_name = "_ZN6String12changeBufferEj"]
    pub fn String_changeBuffer(this: *mut String,
                               maxStrLen: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    #[link_name = "_ZN6String6appendEPKcj"]
    pub fn String_append8(this: *mut String,
                          cstr: *const ::std::os::raw::c_uchar,
                          length: ::std::os::raw::c_uint) -> *mut String;
}
extern "C" {
    #[link_name = "_ZN6StringC1EPKc"]
    pub fn String_String(this: *mut String,
                         cstr: *const ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "_ZN6StringC1EPK19__FlashStringHelper"]
    pub fn String_String1(this: *mut String,
                          pgmstr: *const __FlashStringHelper);
}
extern "C" {
    #[link_name = "_ZN6StringC1ERKS_"]
    pub fn String_String2(this: *mut String, str: *const String);
}
extern "C" {
    #[link_name = "_ZN6StringC1EOS_"]
    pub fn String_String3(this: *mut String, rval: *mut String);
}
extern "C" {
    #[link_name = "_ZN6StringC1EO15StringSumHelper"]
    pub fn String_String4(this: *mut String, rval: *mut StringSumHelper);
}
extern "C" {
    #[link_name = "_ZN6StringC1Ec"]
    pub fn String_String5(this: *mut String, c: ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "_ZN6StringC1Eh"]
    pub fn String_String6(this: *mut String, c: ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "_ZN6StringC1Eih"]
    pub fn String_String7(this: *mut String, arg1: ::std::os::raw::c_int,
                          base: ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "_ZN6StringC1Ejh"]
    pub fn String_String8(this: *mut String, arg1: ::std::os::raw::c_uint,
                          base: ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "_ZN6StringC1Elh"]
    pub fn String_String9(this: *mut String, arg1: ::std::os::raw::c_long,
                          base: ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "_ZN6StringC1Emh"]
    pub fn String_String10(this: *mut String, arg1: ::std::os::raw::c_ulong,
                           base: ::std::os::raw::c_uchar);
}
extern "C" {
    #[link_name = "_ZN6StringC1Efh"]
    pub fn String_String11(this: *mut String, num: f32,
                           digits: ::std::os::raw::c_uchar);
}
impl String {
    #[inline]
    pub unsafe fn reserve(&mut self, size: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar {
        String_reserve(&mut *self, size)
    }
    #[inline]
    pub unsafe fn copy(&mut self, cstr: *const ::std::os::raw::c_uchar,
                       length: ::std::os::raw::c_uint) -> *mut String {
        String_copy(&mut *self, cstr, length)
    }
    #[inline]
    pub unsafe fn move_(&mut self, rhs: *mut String) {
        String_move(&mut *self, rhs)
    }
    #[inline]
    pub unsafe fn append(&mut self, str: *const String) -> *mut String {
        String_append(&mut *self, str)
    }
    #[inline]
    pub unsafe fn append1(&mut self, cstr: *const ::std::os::raw::c_uchar)
     -> *mut String {
        String_append1(&mut *self, cstr)
    }
    #[inline]
    pub unsafe fn append2(&mut self, c: ::std::os::raw::c_uchar)
     -> *mut String {
        String_append2(&mut *self, c)
    }
    #[inline]
    pub unsafe fn append3(&mut self, num: ::std::os::raw::c_int)
     -> *mut String {
        String_append3(&mut *self, num)
    }
    #[inline]
    pub unsafe fn append4(&mut self, num: ::std::os::raw::c_uint)
     -> *mut String {
        String_append4(&mut *self, num)
    }
    #[inline]
    pub unsafe fn append5(&mut self, num: ::std::os::raw::c_long)
     -> *mut String {
        String_append5(&mut *self, num)
    }
    #[inline]
    pub unsafe fn append6(&mut self, num: ::std::os::raw::c_ulong)
     -> *mut String {
        String_append6(&mut *self, num)
    }
    #[inline]
    pub unsafe fn append7(&mut self, num: f32) -> *mut String {
        String_append7(&mut *self, num)
    }
    #[inline]
    pub unsafe fn compareTo(&self, s: *const String)
     -> ::std::os::raw::c_int {
        String_compareTo(&*self, s)
    }
    #[inline]
    pub unsafe fn equals(&self, s: *const String) -> ::std::os::raw::c_uchar {
        String_equals(&*self, s)
    }
    #[inline]
    pub unsafe fn equals1(&self, cstr: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_uchar {
        String_equals1(&*self, cstr)
    }
    #[inline]
    pub unsafe fn equalsIgnoreCase(&self, s: *const String)
     -> ::std::os::raw::c_uchar {
        String_equalsIgnoreCase(&*self, s)
    }
    #[inline]
    pub unsafe fn startsWith(&self, prefix: *const String)
     -> ::std::os::raw::c_uchar {
        String_startsWith(&*self, prefix)
    }
    #[inline]
    pub unsafe fn startsWith1(&self, prefix: *const String,
                              offset: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar {
        String_startsWith1(&*self, prefix, offset)
    }
    #[inline]
    pub unsafe fn endsWith(&self, suffix: *const String)
     -> ::std::os::raw::c_uchar {
        String_endsWith(&*self, suffix)
    }
    #[inline]
    pub unsafe fn charAt(&self, index: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar {
        String_charAt(&*self, index)
    }
    #[inline]
    pub unsafe fn setCharAt(&mut self, index: ::std::os::raw::c_uint,
                            c: ::std::os::raw::c_uchar) {
        String_setCharAt(&mut *self, index, c)
    }
    #[inline]
    pub unsafe fn getBytes(&self, buf: *mut ::std::os::raw::c_uchar,
                           bufsize: ::std::os::raw::c_uint,
                           index: ::std::os::raw::c_uint) {
        String_getBytes(&*self, buf, bufsize, index)
    }
    #[inline]
    pub unsafe fn indexOf(&self, ch: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int {
        String_indexOf(&*self, ch)
    }
    #[inline]
    pub unsafe fn indexOf1(&self, ch: ::std::os::raw::c_uchar,
                           fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int {
        String_indexOf1(&*self, ch, fromIndex)
    }
    #[inline]
    pub unsafe fn indexOf2(&self, str: *const String)
     -> ::std::os::raw::c_int {
        String_indexOf2(&*self, str)
    }
    #[inline]
    pub unsafe fn indexOf3(&self, str: *const String,
                           fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int {
        String_indexOf3(&*self, str, fromIndex)
    }
    #[inline]
    pub unsafe fn lastIndexOf(&self, ch: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int {
        String_lastIndexOf(&*self, ch)
    }
    #[inline]
    pub unsafe fn lastIndexOf1(&self, ch: ::std::os::raw::c_uchar,
                               fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int {
        String_lastIndexOf1(&*self, ch, fromIndex)
    }
    #[inline]
    pub unsafe fn lastIndexOf2(&self, str: *const String)
     -> ::std::os::raw::c_int {
        String_lastIndexOf2(&*self, str)
    }
    #[inline]
    pub unsafe fn lastIndexOf3(&self, str: *const String,
                               fromIndex: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int {
        String_lastIndexOf3(&*self, str, fromIndex)
    }
    #[inline]
    pub unsafe fn substring(&self, beginIndex: ::std::os::raw::c_uint)
     -> String {
        String_substring(&*self, beginIndex)
    }
    #[inline]
    pub unsafe fn substring1(&self, beginIndex: ::std::os::raw::c_uint,
                             endIndex: ::std::os::raw::c_uint) -> String {
        String_substring1(&*self, beginIndex, endIndex)
    }
    #[inline]
    pub unsafe fn replace(&mut self, find: ::std::os::raw::c_uchar,
                          replace: ::std::os::raw::c_uchar) -> *mut String {
        String_replace(&mut *self, find, replace)
    }
    #[inline]
    pub unsafe fn replace1(&mut self, find: *const String,
                           replace: *const String) -> *mut String {
        String_replace1(&mut *self, find, replace)
    }
    #[inline]
    pub unsafe fn remove(&mut self, index: ::std::os::raw::c_uint)
     -> *mut String {
        String_remove(&mut *self, index)
    }
    #[inline]
    pub unsafe fn remove1(&mut self, index: ::std::os::raw::c_uint,
                          count: ::std::os::raw::c_uint) -> *mut String {
        String_remove1(&mut *self, index, count)
    }
    #[inline]
    pub unsafe fn toLowerCase(&mut self) -> *mut String {
        String_toLowerCase(&mut *self)
    }
    #[inline]
    pub unsafe fn toUpperCase(&mut self) -> *mut String {
        String_toUpperCase(&mut *self)
    }
    #[inline]
    pub unsafe fn trim(&mut self) -> *mut String { String_trim(&mut *self) }
    #[inline]
    pub unsafe fn toInt(&self) -> ::std::os::raw::c_long {
        String_toInt(&*self)
    }
    #[inline]
    pub unsafe fn toFloat(&self) -> f32 { String_toFloat(&*self) }
    #[inline]
    pub unsafe fn init(&mut self) { String_init(&mut *self) }
    #[inline]
    pub unsafe fn changeBuffer(&mut self, maxStrLen: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uchar {
        String_changeBuffer(&mut *self, maxStrLen)
    }
    #[inline]
    pub unsafe fn append8(&mut self, cstr: *const ::std::os::raw::c_uchar,
                          length: ::std::os::raw::c_uint) -> *mut String {
        String_append8(&mut *self, cstr, length)
    }
    #[inline]
    pub unsafe fn new(cstr: *const ::std::os::raw::c_uchar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        String_String(&mut __bindgen_tmp, cstr);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new1(pgmstr: *const __FlashStringHelper) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        String_String1(&mut __bindgen_tmp, pgmstr);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new2(str: *const String) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        String_String2(&mut __bindgen_tmp, str);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new3(rval: *mut String) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        String_String3(&mut __bindgen_tmp, rval);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new4(rval: *mut StringSumHelper) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        String_String4(&mut __bindgen_tmp, rval);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new5(c: ::std::os::raw::c_uchar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        String_String5(&mut __bindgen_tmp, c);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new6(c: ::std::os::raw::c_uchar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        String_String6(&mut __bindgen_tmp, c);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new7(arg1: ::std::os::raw::c_int,
                       base: ::std::os::raw::c_uchar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        String_String7(&mut __bindgen_tmp, arg1, base);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new8(arg1: ::std::os::raw::c_uint,
                       base: ::std::os::raw::c_uchar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        String_String8(&mut __bindgen_tmp, arg1, base);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new9(arg1: ::std::os::raw::c_long,
                       base: ::std::os::raw::c_uchar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        String_String9(&mut __bindgen_tmp, arg1, base);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new10(arg1: ::std::os::raw::c_ulong,
                        base: ::std::os::raw::c_uchar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        String_String10(&mut __bindgen_tmp, arg1, base);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn new11(num: f32, digits: ::std::os::raw::c_uchar) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        String_String11(&mut __bindgen_tmp, num, digits);
        __bindgen_tmp
    }
}
pub type __guard = ::std::os::raw::c_longlong;
extern "C" {
    pub fn __cxa_guard_acquire(arg1: *mut __guard) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __cxa_guard_release(arg1: *mut __guard);
}
extern "C" {
    pub fn __cxa_guard_abort(arg1: *mut __guard);
}
extern "C" {
    pub fn __cxa_pure_virtual();
}
#[repr(C)]
pub struct Print__bindgen_vtable {
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Print {
    pub vtable_: *const Print__bindgen_vtable,
    pub write_error: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_Print() {
    assert_eq!(::std::mem::size_of::<Print>() , 8usize);
    assert_eq!(::std::mem::align_of::<Print>() , 4usize);
}
extern "C" {
    #[link_name = "_ZN5Print5printERK6String"]
    pub fn Print_print(this: *mut Print, s: *const String) -> usize;
}
extern "C" {
    #[link_name = "_ZN5Print5printEl"]
    pub fn Print_print1(this: *mut Print, n: ::std::os::raw::c_long) -> usize;
}
extern "C" {
    #[link_name = "_ZN5Print7printlnEv"]
    pub fn Print_println(this: *mut Print) -> usize;
}
extern "C" {
    #[link_name = "_ZN5Print6printfEPKcz"]
    pub fn Print_printf(this: *mut Print,
                        format: *const ::std::os::raw::c_uchar, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZN5Print6printfEPK19__FlashStringHelperz"]
    pub fn Print_printf1(this: *mut Print,
                         format: *const __FlashStringHelper, ...)
     -> ::std::os::raw::c_int;
}
impl Clone for Print {
    fn clone(&self) -> Self { *self }
}
impl Print {
    #[inline]
    pub unsafe fn print(&mut self, s: *const String) -> usize {
        Print_print(&mut *self, s)
    }
    #[inline]
    pub unsafe fn print1(&mut self, n: ::std::os::raw::c_long) -> usize {
        Print_print1(&mut *self, n)
    }
    #[inline]
    pub unsafe fn println(&mut self) -> usize { Print_println(&mut *self) }
    #[inline]
    pub unsafe fn printf(&mut self,
                         format: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int {
        Print_printf(&mut *self, format)
    }
    #[inline]
    pub unsafe fn printf1(&mut self, format: *const __FlashStringHelper)
     -> ::std::os::raw::c_int {
        Print_printf1(&mut *self, format)
    }
}
#[repr(C)]
pub struct Printable__bindgen_vtable {
}
/** The Printable class provides a way for new classes to allow themselves to be printed.
    By deriving from Printable and implementing the printTo method, it will then be possible
    for users to print out instances of this class by passing them into the usual
    Print::print and Print::println methods.
*/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Printable {
    pub vtable_: *const Printable__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_Printable() {
    assert_eq!(::std::mem::size_of::<Printable>() , 4usize);
    assert_eq!(::std::mem::align_of::<Printable>() , 4usize);
}
impl Clone for Printable {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct Stream {
    pub _base: Print,
    pub _timeout: ::std::os::raw::c_ulong,
    pub read_error: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_Stream() {
    assert_eq!(::std::mem::size_of::<Stream>() , 16usize);
    assert_eq!(::std::mem::align_of::<Stream>() , 4usize);
}
extern "C" {
    #[link_name = "_ZN6Stream4readEv"]
    pub fn Stream_read(this: *mut Stream) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZN6Stream10setTimeoutEm"]
    pub fn Stream_setTimeout(this: *mut Stream,
                             timeout: ::std::os::raw::c_ulong);
}
extern "C" {
    #[link_name = "_ZN6Stream4findEPc"]
    pub fn Stream_find(this: *mut Stream,
                       target: *mut ::std::os::raw::c_uchar) -> bool;
}
extern "C" {
    #[link_name = "_ZN6Stream4findEPcj"]
    pub fn Stream_find1(this: *mut Stream,
                        target: *mut ::std::os::raw::c_uchar, length: usize)
     -> bool;
}
extern "C" {
    #[link_name = "_ZN6Stream9findUntilEPcS0_"]
    pub fn Stream_findUntil(this: *mut Stream,
                            target: *mut ::std::os::raw::c_uchar,
                            terminator: *mut ::std::os::raw::c_uchar) -> bool;
}
extern "C" {
    #[link_name = "_ZN6Stream9findUntilEPcjS0_j"]
    pub fn Stream_findUntil1(this: *mut Stream,
                             target: *mut ::std::os::raw::c_uchar,
                             targetLen: usize,
                             terminate: *mut ::std::os::raw::c_uchar,
                             termLen: usize) -> bool;
}
extern "C" {
    #[link_name = "_ZN6Stream8parseIntEv"]
    pub fn Stream_parseInt(this: *mut Stream) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "_ZN6Stream8parseIntEc"]
    pub fn Stream_parseInt1(this: *mut Stream,
                            skipChar: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "_ZN6Stream10parseFloatEv"]
    pub fn Stream_parseFloat(this: *mut Stream) -> f32;
}
extern "C" {
    #[link_name = "_ZN6Stream10parseFloatEc"]
    pub fn Stream_parseFloat1(this: *mut Stream,
                              skipChar: ::std::os::raw::c_uchar) -> f32;
}
extern "C" {
    #[link_name = "_ZN6Stream9readBytesEPcj"]
    pub fn Stream_readBytes(this: *mut Stream,
                            buffer: *mut ::std::os::raw::c_uchar,
                            length: usize) -> usize;
}
extern "C" {
    #[link_name = "_ZN6Stream14readBytesUntilEcPcj"]
    pub fn Stream_readBytesUntil(this: *mut Stream,
                                 terminator: ::std::os::raw::c_uchar,
                                 buffer: *mut ::std::os::raw::c_uchar,
                                 length: usize) -> usize;
}
extern "C" {
    #[link_name = "_ZN6Stream10readStringEj"]
    pub fn Stream_readString(this: *mut Stream, max: usize) -> String;
}
extern "C" {
    #[link_name = "_ZN6Stream15readStringUntilEcj"]
    pub fn Stream_readStringUntil(this: *mut Stream,
                                  terminator: ::std::os::raw::c_uchar,
                                  max: usize) -> String;
}
impl Clone for Stream {
    fn clone(&self) -> Self { *self }
}
impl Stream {
    #[inline]
    pub unsafe fn read(&mut self) -> ::std::os::raw::c_int {
        Stream_read(&mut *self)
    }
    #[inline]
    pub unsafe fn setTimeout(&mut self, timeout: ::std::os::raw::c_ulong) {
        Stream_setTimeout(&mut *self, timeout)
    }
    #[inline]
    pub unsafe fn find(&mut self, target: *mut ::std::os::raw::c_uchar)
     -> bool {
        Stream_find(&mut *self, target)
    }
    #[inline]
    pub unsafe fn find1(&mut self, target: *mut ::std::os::raw::c_uchar,
                        length: usize) -> bool {
        Stream_find1(&mut *self, target, length)
    }
    #[inline]
    pub unsafe fn findUntil(&mut self, target: *mut ::std::os::raw::c_uchar,
                            terminator: *mut ::std::os::raw::c_uchar)
     -> bool {
        Stream_findUntil(&mut *self, target, terminator)
    }
    #[inline]
    pub unsafe fn findUntil1(&mut self, target: *mut ::std::os::raw::c_uchar,
                             targetLen: usize,
                             terminate: *mut ::std::os::raw::c_uchar,
                             termLen: usize) -> bool {
        Stream_findUntil1(&mut *self, target, targetLen, terminate, termLen)
    }
    #[inline]
    pub unsafe fn parseInt(&mut self) -> ::std::os::raw::c_long {
        Stream_parseInt(&mut *self)
    }
    #[inline]
    pub unsafe fn parseInt1(&mut self, skipChar: ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_long {
        Stream_parseInt1(&mut *self, skipChar)
    }
    #[inline]
    pub unsafe fn parseFloat(&mut self) -> f32 {
        Stream_parseFloat(&mut *self)
    }
    #[inline]
    pub unsafe fn parseFloat1(&mut self, skipChar: ::std::os::raw::c_uchar)
     -> f32 {
        Stream_parseFloat1(&mut *self, skipChar)
    }
    #[inline]
    pub unsafe fn readBytes(&mut self, buffer: *mut ::std::os::raw::c_uchar,
                            length: usize) -> usize {
        Stream_readBytes(&mut *self, buffer, length)
    }
    #[inline]
    pub unsafe fn readBytesUntil(&mut self,
                                 terminator: ::std::os::raw::c_uchar,
                                 buffer: *mut ::std::os::raw::c_uchar,
                                 length: usize) -> usize {
        Stream_readBytesUntil(&mut *self, terminator, buffer, length)
    }
    #[inline]
    pub unsafe fn readString(&mut self, max: usize) -> String {
        Stream_readString(&mut *self, max)
    }
    #[inline]
    pub unsafe fn readStringUntil(&mut self,
                                  terminator: ::std::os::raw::c_uchar,
                                  max: usize) -> String {
        Stream_readStringUntil(&mut *self, terminator, max)
    }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HardwareSerial {
    pub _base: Stream,
}
#[test]
fn bindgen_test_layout_HardwareSerial() {
    assert_eq!(::std::mem::size_of::<HardwareSerial>() , 16usize);
    assert_eq!(::std::mem::align_of::<HardwareSerial>() , 4usize);
}
impl Clone for HardwareSerial {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "Serial1"]
    pub static mut Serial1: HardwareSerial;
}
extern "C" {
    #[link_name = "_Z12serialEvent1v"]
    pub fn serialEvent1();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HardwareSerial2 {
    pub _base: HardwareSerial,
}
#[test]
fn bindgen_test_layout_HardwareSerial2() {
    assert_eq!(::std::mem::size_of::<HardwareSerial2>() , 16usize);
    assert_eq!(::std::mem::align_of::<HardwareSerial2>() , 4usize);
}
impl Clone for HardwareSerial2 {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "Serial2"]
    pub static mut Serial2: HardwareSerial2;
}
extern "C" {
    #[link_name = "_Z12serialEvent2v"]
    pub fn serialEvent2();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HardwareSerial3 {
    pub _base: HardwareSerial,
}
#[test]
fn bindgen_test_layout_HardwareSerial3() {
    assert_eq!(::std::mem::size_of::<HardwareSerial3>() , 16usize);
    assert_eq!(::std::mem::align_of::<HardwareSerial3>() , 4usize);
}
impl Clone for HardwareSerial3 {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "Serial3"]
    pub static mut Serial3: HardwareSerial3;
}
extern "C" {
    #[link_name = "_Z12serialEvent3v"]
    pub fn serialEvent3();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HardwareSerial4 {
    pub _base: HardwareSerial,
}
#[test]
fn bindgen_test_layout_HardwareSerial4() {
    assert_eq!(::std::mem::size_of::<HardwareSerial4>() , 16usize);
    assert_eq!(::std::mem::align_of::<HardwareSerial4>() , 4usize);
}
impl Clone for HardwareSerial4 {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "Serial4"]
    pub static mut Serial4: HardwareSerial4;
}
extern "C" {
    #[link_name = "_Z12serialEvent4v"]
    pub fn serialEvent4();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HardwareSerial5 {
    pub _base: HardwareSerial,
}
#[test]
fn bindgen_test_layout_HardwareSerial5() {
    assert_eq!(::std::mem::size_of::<HardwareSerial5>() , 16usize);
    assert_eq!(::std::mem::align_of::<HardwareSerial5>() , 4usize);
}
impl Clone for HardwareSerial5 {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "Serial5"]
    pub static mut Serial5: HardwareSerial5;
}
extern "C" {
    #[link_name = "_Z12serialEvent5v"]
    pub fn serialEvent5();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct HardwareSerial6 {
    pub _base: HardwareSerial,
}
#[test]
fn bindgen_test_layout_HardwareSerial6() {
    assert_eq!(::std::mem::size_of::<HardwareSerial6>() , 16usize);
    assert_eq!(::std::mem::align_of::<HardwareSerial6>() , 4usize);
}
impl Clone for HardwareSerial6 {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "Serial6"]
    pub static mut Serial6: HardwareSerial6;
}
extern "C" {
    #[link_name = "_Z12serialEvent6v"]
    pub fn serialEvent6();
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PORTDemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_PORTDemulation() {
    assert_eq!(::std::mem::size_of::<PORTDemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<PORTDemulation>() , 1usize);
}
impl Clone for PORTDemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "PORTD"]
    pub static mut PORTD: PORTDemulation;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PINDemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_PINDemulation() {
    assert_eq!(::std::mem::size_of::<PINDemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<PINDemulation>() , 1usize);
}
impl Clone for PINDemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "PIND"]
    pub static mut PIND: PINDemulation;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct DDRDemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_DDRDemulation() {
    assert_eq!(::std::mem::size_of::<DDRDemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<DDRDemulation>() , 1usize);
}
impl Clone for DDRDemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "DDRD"]
    pub static mut DDRD: DDRDemulation;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PORTBemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_PORTBemulation() {
    assert_eq!(::std::mem::size_of::<PORTBemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<PORTBemulation>() , 1usize);
}
impl Clone for PORTBemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "PORTB"]
    pub static mut PORTB: PORTBemulation;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PINBemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_PINBemulation() {
    assert_eq!(::std::mem::size_of::<PINBemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<PINBemulation>() , 1usize);
}
impl Clone for PINBemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "PINB"]
    pub static mut PINB: PINBemulation;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct DDRBemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_DDRBemulation() {
    assert_eq!(::std::mem::size_of::<DDRBemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<DDRBemulation>() , 1usize);
}
impl Clone for DDRBemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "DDRB"]
    pub static mut DDRB: DDRBemulation;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PORTCemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_PORTCemulation() {
    assert_eq!(::std::mem::size_of::<PORTCemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<PORTCemulation>() , 1usize);
}
impl Clone for PORTCemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "PORTC"]
    pub static mut PORTC: PORTCemulation;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct PINCemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_PINCemulation() {
    assert_eq!(::std::mem::size_of::<PINCemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<PINCemulation>() , 1usize);
}
impl Clone for PINCemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "PINC"]
    pub static mut PINC: PINCemulation;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct DDRCemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_DDRCemulation() {
    assert_eq!(::std::mem::size_of::<DDRCemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<DDRCemulation>() , 1usize);
}
impl Clone for DDRCemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "DDRC"]
    pub static mut DDRC: DDRCemulation;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SPCRemulation {
    pub _address: u8,
}
extern "C" {
    #[link_name = "_ZN13SPCRemulation6pinoutE"]
    pub static mut SPCRemulation_pinout: u8;
}
#[test]
fn bindgen_test_layout_SPCRemulation() {
    assert_eq!(::std::mem::size_of::<SPCRemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<SPCRemulation>() , 1usize);
}
impl Clone for SPCRemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SPSRemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_SPSRemulation() {
    assert_eq!(::std::mem::size_of::<SPSRemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<SPSRemulation>() , 1usize);
}
impl Clone for SPSRemulation {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SPDRemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_SPDRemulation() {
    assert_eq!(::std::mem::size_of::<SPDRemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<SPDRemulation>() , 1usize);
}
impl Clone for SPDRemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "SPCR"]
    pub static mut SPCR: SPCRemulation;
}
extern "C" {
    #[link_name = "SPSR"]
    pub static mut SPSR: SPSRemulation;
}
extern "C" {
    #[link_name = "SPDR"]
    pub static mut SPDR: SPDRemulation;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SREGemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_SREGemulation() {
    assert_eq!(::std::mem::size_of::<SREGemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<SREGemulation>() , 1usize);
}
impl Clone for SREGemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "SREG"]
    pub static mut SREG: SREGemulation;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct EIMSKemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_EIMSKemulation() {
    assert_eq!(::std::mem::size_of::<EIMSKemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<EIMSKemulation>() , 1usize);
}
impl Clone for EIMSKemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "EIMSK"]
    pub static mut EIMSK: EIMSKemulation;
}
extern "C" {
    pub fn usb_serial_getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usb_serial_peekchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usb_serial_available() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usb_serial_read(buffer: *mut ::std::os::raw::c_void, size: u32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usb_serial_flush_input();
}
extern "C" {
    pub fn usb_serial_putchar(c: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usb_serial_write(buffer: *const ::std::os::raw::c_void, size: u32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usb_serial_write_buffer_free() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usb_serial_flush_output();
}
extern "C" {
    #[link_name = "usb_cdc_line_coding"]
    pub static mut usb_cdc_line_coding: [u32; 2usize];
}
extern "C" {
    #[link_name = "usb_cdc_line_rtsdtr_millis"]
    pub static mut usb_cdc_line_rtsdtr_millis: u32;
}
extern "C" {
    #[link_name = "usb_cdc_line_rtsdtr"]
    pub static mut usb_cdc_line_rtsdtr: u8;
}
extern "C" {
    #[link_name = "usb_cdc_transmit_flush_timer"]
    pub static mut usb_cdc_transmit_flush_timer: u8;
}
extern "C" {
    #[link_name = "usb_configuration"]
    pub static mut usb_configuration: u8;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct usb_serial_class {
    pub _base: Stream,
}
#[test]
fn bindgen_test_layout_usb_serial_class() {
    assert_eq!(::std::mem::size_of::<usb_serial_class>() , 16usize);
    assert_eq!(::std::mem::align_of::<usb_serial_class>() , 4usize);
}
impl Clone for usb_serial_class {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "Serial"]
    pub static mut Serial: usb_serial_class;
}
extern "C" {
    #[link_name = "_Z11serialEventv"]
    pub fn serialEvent();
}
extern "C" {
    #[link_name = "keycodes_ascii"]
    pub static mut keycodes_ascii: *const u8;
}
extern "C" {
    #[link_name = "keycodes_iso_8859_1"]
    pub static mut keycodes_iso_8859_1: *const u8;
}
extern "C" {
    pub fn usb_keyboard_write(c: u8);
}
extern "C" {
    pub fn usb_keyboard_write_unicode(cpoint: u16);
}
extern "C" {
    pub fn usb_keyboard_press_keycode(n: u16);
}
extern "C" {
    pub fn usb_keyboard_release_keycode(n: u16);
}
extern "C" {
    pub fn usb_keyboard_release_all();
}
extern "C" {
    pub fn usb_keyboard_press(key: u8, modifier: u8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usb_keyboard_send() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn usb_keymedia_release_all();
}
extern "C" {
    #[link_name = "keyboard_modifier_keys"]
    pub static mut keyboard_modifier_keys: u8;
}
extern "C" {
    #[link_name = "keyboard_keys"]
    pub static mut keyboard_keys: [u8; 6usize];
}
extern "C" {
    #[link_name = "keyboard_protocol"]
    pub static mut keyboard_protocol: u8;
}
extern "C" {
    #[link_name = "keyboard_idle_config"]
    pub static mut keyboard_idle_config: u8;
}
extern "C" {
    #[link_name = "keyboard_idle_count"]
    pub static mut keyboard_idle_count: u8;
}
extern "C" {
    #[link_name = "keyboard_leds"]
    pub static mut keyboard_leds: u8;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct usb_keyboard_class {
    pub _base: Print,
}
#[test]
fn bindgen_test_layout_usb_keyboard_class() {
    assert_eq!(::std::mem::size_of::<usb_keyboard_class>() , 8usize);
    assert_eq!(::std::mem::align_of::<usb_keyboard_class>() , 4usize);
}
impl Clone for usb_keyboard_class {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "Keyboard"]
    pub static mut Keyboard: usb_keyboard_class;
}
extern "C" {
    #[link_name = "_Z14isAlphaNumerici"]
    pub fn isAlphaNumeric(c: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    #[link_name = "_Z7isAlphai"]
    pub fn isAlpha(c: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    #[link_name = "_Z7isAsciii"]
    pub fn isAscii(c: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    #[link_name = "_Z12isWhitespacei"]
    pub fn isWhitespace(c: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    #[link_name = "_Z9isControli"]
    pub fn isControl(c: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    #[link_name = "_Z7isDigiti"]
    pub fn isDigit(c: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    #[link_name = "_Z7isGraphi"]
    pub fn isGraph(c: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    #[link_name = "_Z11isLowerCasei"]
    pub fn isLowerCase(c: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    #[link_name = "_Z11isPrintablei"]
    pub fn isPrintable(c: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    #[link_name = "_Z7isPuncti"]
    pub fn isPunct(c: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    #[link_name = "_Z7isSpacei"]
    pub fn isSpace(c: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    #[link_name = "_Z11isUpperCasei"]
    pub fn isUpperCase(c: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    #[link_name = "_Z18isHexadecimalDigiti"]
    pub fn isHexadecimalDigit(c: ::std::os::raw::c_int) -> boolean;
}
extern "C" {
    #[link_name = "_Z7toAsciii"]
    pub fn toAscii(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_Z11toLowerCasei"]
    pub fn toLowerCase(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_Z11toUpperCasei"]
    pub fn toUpperCase(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct elapsedMillis {
    pub ms: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_elapsedMillis() {
    assert_eq!(::std::mem::size_of::<elapsedMillis>() , 4usize);
    assert_eq!(::std::mem::align_of::<elapsedMillis>() , 4usize);
}
impl Clone for elapsedMillis {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct elapsedMicros {
    pub us: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_elapsedMicros() {
    assert_eq!(::std::mem::size_of::<elapsedMicros>() , 4usize);
    assert_eq!(::std::mem::align_of::<elapsedMicros>() , 4usize);
}
impl Clone for elapsedMicros {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug)]
pub struct IntervalTimer {
    pub status: bool,
    pub PIT_id: u8,
    pub PIT_LDVAL: IntervalTimer_reg,
    pub PIT_TCTRL: IntervalTimer_reg,
    pub IRQ_PIT_CH: u8,
    pub nvic_priority: u8,
    pub myISR: IntervalTimer_ISR,
}
pub type IntervalTimer_ISR = ::std::option::Option<unsafe extern "C" fn()>;
pub type IntervalTimer_reg = *mut u32;
pub const IntervalTimer_TIMER_OFF: IntervalTimer__bindgen_ty_1 =
    IntervalTimer__bindgen_ty_1::TIMER_OFF;
pub const IntervalTimer_TIMER_PIT: IntervalTimer__bindgen_ty_1 =
    IntervalTimer__bindgen_ty_1::TIMER_PIT;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum IntervalTimer__bindgen_ty_1 { TIMER_OFF = 0, TIMER_PIT = 1, }
pub const IntervalTimer_NUM_PIT: u8 = 4;
pub const IntervalTimer_MAX_PERIOD: u32 = 89478485;
extern "C" {
    #[link_name = "_ZN13IntervalTimer11PIT_enabledE"]
    pub static mut IntervalTimer_PIT_enabled: bool;
}
extern "C" {
    #[link_name = "_ZN13IntervalTimer8PIT_usedE"]
    pub static mut IntervalTimer_PIT_used: [bool; 4usize];
}
extern "C" {
    #[link_name = "_ZN13IntervalTimer7PIT_ISRE"]
    pub static mut IntervalTimer_PIT_ISR: [IntervalTimer_ISR; 4usize];
}
#[test]
fn bindgen_test_layout_IntervalTimer() {
    assert_eq!(::std::mem::size_of::<IntervalTimer>() , 20usize);
    assert_eq!(::std::mem::align_of::<IntervalTimer>() , 4usize);
}
extern "C" {
    #[link_name = "_ZN13IntervalTimer3endEv"]
    pub fn IntervalTimer_end(this: *mut IntervalTimer);
}
impl IntervalTimer {
    #[inline]
    pub unsafe fn end(&mut self) { IntervalTimer_end(&mut *self) }
}
extern "C" {
    #[link_name = "_Z8makeWordt"]
    pub fn makeWord(w: u16) -> u16;
}
extern "C" {
    #[link_name = "_Z8makeWordhh"]
    pub fn makeWord1(h: byte, l: byte) -> u16;
}
extern "C" {
    #[link_name = "_Z7pulseInhhm"]
    pub fn pulseIn1(pin: u8, state: u8, timeout: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "_Z4tonehtj"]
    pub fn tone(pin: u8, frequency: u16, duration: u32);
}
extern "C" {
    #[link_name = "_Z6noToneh"]
    pub fn noTone(pin: u8);
}
extern "C" {
    #[link_name = "_Z6randomv"]
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "_Z6randomj"]
    pub fn random1(howbig: u32) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "_Z6randomii"]
    pub fn random2(howsmall: i32, howbig: i32) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "_Z10randomSeedj"]
    pub fn randomSeed(newseed: u32);
}
extern "C" {
    #[link_name = "_Z7srandomj"]
    pub fn srandom(newseed: u32);
}
extern "C" {
    #[link_name = "_Z3maplllll"]
    pub fn map(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long,
               arg3: ::std::os::raw::c_long, arg4: ::std::os::raw::c_long,
               arg5: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SPISettings {
    pub ctar: u32,
}
extern "C" {
    #[link_name = "_ZN11SPISettings14ctar_div_tableE"]
    pub static mut SPISettings_ctar_div_table: [u16; 23usize];
}
extern "C" {
    #[link_name = "_ZN11SPISettings16ctar_clock_tableE"]
    pub static mut SPISettings_ctar_clock_table: [u32; 23usize];
}
#[test]
fn bindgen_test_layout_SPISettings() {
    assert_eq!(::std::mem::size_of::<SPISettings>() , 4usize);
    assert_eq!(::std::mem::align_of::<SPISettings>() , 4usize);
}
impl Clone for SPISettings {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct SPIClass {
    pub _address: u8,
}
extern "C" {
    #[link_name = "_ZN8SPIClass18interruptMasksUsedE"]
    pub static mut SPIClass_interruptMasksUsed: u8;
}
extern "C" {
    #[link_name = "_ZN8SPIClass13interruptMaskE"]
    pub static mut SPIClass_interruptMask: [u32; 2usize];
}
extern "C" {
    #[link_name = "_ZN8SPIClass13interruptSaveE"]
    pub static mut SPIClass_interruptSave: [u32; 2usize];
}
#[test]
fn bindgen_test_layout_SPIClass() {
    assert_eq!(::std::mem::size_of::<SPIClass>() , 1usize);
    assert_eq!(::std::mem::align_of::<SPIClass>() , 1usize);
}
extern "C" {
    #[link_name = "_ZN8SPIClass5beginEv"]
    pub fn SPIClass_begin();
}
extern "C" {
    #[link_name = "_ZN8SPIClass14usingInterruptE12IRQ_NUMBER_t"]
    pub fn SPIClass_usingInterrupt(interruptName: IRQ_NUMBER_t);
}
extern "C" {
    #[link_name = "_ZN8SPIClass17notUsingInterruptE12IRQ_NUMBER_t"]
    pub fn SPIClass_notUsingInterrupt(interruptName: IRQ_NUMBER_t);
}
extern "C" {
    #[link_name = "_ZN8SPIClass3endEv"]
    pub fn SPIClass_end();
}
extern "C" {
    #[link_name = "_ZN8SPIClass11setBitOrderEh"]
    pub fn SPIClass_setBitOrder(bitOrder: u8);
}
extern "C" {
    #[link_name = "_ZN8SPIClass11setDataModeEh"]
    pub fn SPIClass_setDataMode(dataMode: u8);
}
extern "C" {
    #[link_name = "_ZN8SPIClass24setClockDivider_noInlineEj"]
    pub fn SPIClass_setClockDivider_noInline(clk: u32);
}
extern "C" {
    #[link_name = "_ZN8SPIClass15pinIsChipSelectEh"]
    pub fn SPIClass_pinIsChipSelect(pin: u8) -> u8;
}
extern "C" {
    #[link_name = "_ZN8SPIClass15pinIsChipSelectEhh"]
    pub fn SPIClass_pinIsChipSelect1(pin1: u8, pin2: u8) -> bool;
}
extern "C" {
    #[link_name = "_ZN8SPIClass5setCSEh"]
    pub fn SPIClass_setCS(pin: u8) -> u8;
}
impl Clone for SPIClass {
    fn clone(&self) -> Self { *self }
}
impl SPIClass {
    #[inline]
    pub unsafe fn begin() { SPIClass_begin() }
    #[inline]
    pub unsafe fn usingInterrupt(interruptName: IRQ_NUMBER_t) {
        SPIClass_usingInterrupt(interruptName)
    }
    #[inline]
    pub unsafe fn notUsingInterrupt(interruptName: IRQ_NUMBER_t) {
        SPIClass_notUsingInterrupt(interruptName)
    }
    #[inline]
    pub unsafe fn end() { SPIClass_end() }
    #[inline]
    pub unsafe fn setBitOrder(bitOrder: u8) { SPIClass_setBitOrder(bitOrder) }
    #[inline]
    pub unsafe fn setDataMode(dataMode: u8) { SPIClass_setDataMode(dataMode) }
    #[inline]
    pub unsafe fn setClockDivider_noInline(clk: u32) {
        SPIClass_setClockDivider_noInline(clk)
    }
    #[inline]
    pub unsafe fn pinIsChipSelect(pin: u8) -> u8 {
        SPIClass_pinIsChipSelect(pin)
    }
    #[inline]
    pub unsafe fn pinIsChipSelect1(pin1: u8, pin2: u8) -> bool {
        SPIClass_pinIsChipSelect1(pin1, pin2)
    }
    #[inline]
    pub unsafe fn setCS(pin: u8) -> u8 { SPIClass_setCS(pin) }
}
extern "C" {
    #[link_name = "SPI"]
    pub static mut SPI: SPIClass;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TwoWire {
    pub _base: Stream,
}
extern "C" {
    #[link_name = "_ZN7TwoWire8rxBufferE"]
    pub static mut TwoWire_rxBuffer: *mut u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire13rxBufferIndexE"]
    pub static mut TwoWire_rxBufferIndex: u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire14rxBufferLengthE"]
    pub static mut TwoWire_rxBufferLength: u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire9txAddressE"]
    pub static mut TwoWire_txAddress: u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire8txBufferE"]
    pub static mut TwoWire_txBuffer: *mut u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire13txBufferIndexE"]
    pub static mut TwoWire_txBufferIndex: u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire14txBufferLengthE"]
    pub static mut TwoWire_txBufferLength: u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire12transmittingE"]
    pub static mut TwoWire_transmitting: u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire14user_onRequestE"]
    pub static mut TwoWire_user_onRequest:
               ::std::option::Option<unsafe extern "C" fn()>;
}
extern "C" {
    #[link_name = "_ZN7TwoWire14user_onReceiveE"]
    pub static mut TwoWire_user_onReceive:
               ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              ::std::os::raw::c_int)>;
}
extern "C" {
    #[link_name = "_ZN7TwoWire11sda_pin_numE"]
    pub static mut TwoWire_sda_pin_num: u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire11scl_pin_numE"]
    pub static mut TwoWire_scl_pin_num: u8;
}
#[test]
fn bindgen_test_layout_TwoWire() {
    assert_eq!(::std::mem::size_of::<TwoWire>() , 16usize);
    assert_eq!(::std::mem::align_of::<TwoWire>() , 4usize);
}
extern "C" {
    #[link_name = "_ZN7TwoWire5beginEv"]
    pub fn TwoWire_begin(this: *mut TwoWire);
}
extern "C" {
    #[link_name = "_ZN7TwoWire5beginEh"]
    pub fn TwoWire_begin1(this: *mut TwoWire, arg1: u8);
}
extern "C" {
    #[link_name = "_ZN7TwoWire5beginEi"]
    pub fn TwoWire_begin2(this: *mut TwoWire, arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "_ZN7TwoWire3endEv"]
    pub fn TwoWire_end(this: *mut TwoWire);
}
extern "C" {
    #[link_name = "_ZN7TwoWire8setClockEj"]
    pub fn TwoWire_setClock(this: *mut TwoWire, arg1: u32);
}
extern "C" {
    #[link_name = "_ZN7TwoWire6setSDAEh"]
    pub fn TwoWire_setSDA(this: *mut TwoWire, arg1: u8);
}
extern "C" {
    #[link_name = "_ZN7TwoWire6setSCLEh"]
    pub fn TwoWire_setSCL(this: *mut TwoWire, arg1: u8);
}
extern "C" {
    #[link_name = "_ZN7TwoWire17beginTransmissionEh"]
    pub fn TwoWire_beginTransmission(this: *mut TwoWire, arg1: u8);
}
extern "C" {
    #[link_name = "_ZN7TwoWire17beginTransmissionEi"]
    pub fn TwoWire_beginTransmission1(this: *mut TwoWire,
                                      arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "_ZN7TwoWire15endTransmissionEv"]
    pub fn TwoWire_endTransmission(this: *mut TwoWire) -> u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire15endTransmissionEh"]
    pub fn TwoWire_endTransmission1(this: *mut TwoWire, arg1: u8) -> u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire11requestFromEhh"]
    pub fn TwoWire_requestFrom(this: *mut TwoWire, arg1: u8, arg2: u8) -> u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire11requestFromEhhh"]
    pub fn TwoWire_requestFrom1(this: *mut TwoWire, arg1: u8, arg2: u8,
                                arg3: u8) -> u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire11requestFromEii"]
    pub fn TwoWire_requestFrom2(this: *mut TwoWire,
                                arg1: ::std::os::raw::c_int,
                                arg2: ::std::os::raw::c_int) -> u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire11requestFromEiii"]
    pub fn TwoWire_requestFrom3(this: *mut TwoWire,
                                arg1: ::std::os::raw::c_int,
                                arg2: ::std::os::raw::c_int,
                                arg3: ::std::os::raw::c_int) -> u8;
}
extern "C" {
    #[link_name = "_ZN7TwoWire4readEv"]
    pub fn TwoWire_read(this: *mut TwoWire) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "_ZN7TwoWire9onReceiveEPFviE"]
    pub fn TwoWire_onReceive(this: *mut TwoWire,
                             arg1:
                                 ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                ::std::os::raw::c_int)>);
}
extern "C" {
    #[link_name = "_ZN7TwoWire9onRequestEPFvvE"]
    pub fn TwoWire_onRequest(this: *mut TwoWire,
                             arg1:
                                 ::std::option::Option<unsafe extern "C" fn()>);
}
extern "C" {
    #[link_name = "_ZN7TwoWireC1Ev"]
    pub fn TwoWire_TwoWire(this: *mut TwoWire);
}
impl Clone for TwoWire {
    fn clone(&self) -> Self { *self }
}
impl TwoWire {
    #[inline]
    pub unsafe fn begin(&mut self) { TwoWire_begin(&mut *self) }
    #[inline]
    pub unsafe fn begin1(&mut self, arg1: u8) {
        TwoWire_begin1(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn begin2(&mut self, arg1: ::std::os::raw::c_int) {
        TwoWire_begin2(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn end(&mut self) { TwoWire_end(&mut *self) }
    #[inline]
    pub unsafe fn setClock(&mut self, arg1: u32) {
        TwoWire_setClock(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn setSDA(&mut self, arg1: u8) {
        TwoWire_setSDA(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn setSCL(&mut self, arg1: u8) {
        TwoWire_setSCL(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn beginTransmission(&mut self, arg1: u8) {
        TwoWire_beginTransmission(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn beginTransmission1(&mut self, arg1: ::std::os::raw::c_int) {
        TwoWire_beginTransmission1(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn endTransmission(&mut self) -> u8 {
        TwoWire_endTransmission(&mut *self)
    }
    #[inline]
    pub unsafe fn endTransmission1(&mut self, arg1: u8) -> u8 {
        TwoWire_endTransmission1(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn requestFrom(&mut self, arg1: u8, arg2: u8) -> u8 {
        TwoWire_requestFrom(&mut *self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn requestFrom1(&mut self, arg1: u8, arg2: u8, arg3: u8)
     -> u8 {
        TwoWire_requestFrom1(&mut *self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn requestFrom2(&mut self, arg1: ::std::os::raw::c_int,
                               arg2: ::std::os::raw::c_int) -> u8 {
        TwoWire_requestFrom2(&mut *self, arg1, arg2)
    }
    #[inline]
    pub unsafe fn requestFrom3(&mut self, arg1: ::std::os::raw::c_int,
                               arg2: ::std::os::raw::c_int,
                               arg3: ::std::os::raw::c_int) -> u8 {
        TwoWire_requestFrom3(&mut *self, arg1, arg2, arg3)
    }
    #[inline]
    pub unsafe fn read(&mut self) -> ::std::os::raw::c_int {
        TwoWire_read(&mut *self)
    }
    #[inline]
    pub unsafe fn onReceive(&mut self,
                            arg1:
                                ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                               ::std::os::raw::c_int)>) {
        TwoWire_onReceive(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn onRequest(&mut self,
                            arg1:
                                ::std::option::Option<unsafe extern "C" fn()>) {
        TwoWire_onRequest(&mut *self, arg1)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        TwoWire_TwoWire(&mut __bindgen_tmp);
        __bindgen_tmp
    }
}
extern "C" {
    #[link_name = "Wire"]
    pub static mut Wire: TwoWire;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TWBRemulation {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_TWBRemulation() {
    assert_eq!(::std::mem::size_of::<TWBRemulation>() , 1usize);
    assert_eq!(::std::mem::align_of::<TWBRemulation>() , 1usize);
}
impl Clone for TWBRemulation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "TWBR"]
    pub static mut TWBR: TWBRemulation;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list {
    pub __ap: *mut ::std::os::raw::c_void,
}
impl Clone for __va_list {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = __va_list;
